{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/utils/BufferGeometryUtils.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet gpuType = - 1;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( gpuType === - 1 ) gpuType = attribute.gpuType;\n\t\tif ( gpuType !== attribute.gpuType ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.count * itemSize;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tconst result = new BufferAttribute( array, itemSize, normalized );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst tupleOffset = offset / itemSize;\n\t\t\tfor ( let j = 0, l = attribute.count; j < l; j ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tconst value = attribute.getComponent( j, c );\n\t\t\t\t\tresult.setComponent( j + tupleOffset, c, value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tarray.set( attribute.array, offset );\n\n\t\t}\n\n\t\toffset += attribute.count * itemSize;\n\n\t}\n\n\tif ( gpuType !== undefined ) {\n\n\t\tresult.gpuType = gpuType;\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferAttribute} attribute\n * @return {BufferAttribute}\n */\nexport function deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n// returns a new, non-interleaved version of the provided attribute\nexport function deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n// deinterleaves all attributes on the geometry\nexport function deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @return {number}\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry}\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new attr.constructor(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\tif ( morphAttributes ) {\n\n\t\t\tif ( ! tmpMorphAttributes[ name ] ) tmpMorphAttributes[ name ] = [];\n\t\t\tmorphAttributes.forEach( ( morphAttr, i ) => {\n\n\t\t\t\tconst array = new morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize );\n\t\t\t\ttmpMorphAttributes[ name ][ i ] = new morphAttr.constructor( array, morphAttr.itemSize, morphAttr.normalized );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst halfTolerance = tolerance * 0.5;\n\tconst exponent = Math.log10( 1 / tolerance );\n\tconst hashMultiplier = Math.pow( 10, exponent );\n\tconst hashAdditive = halfTolerance * hashMultiplier;\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newArray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewArray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttributes ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttributes.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttributes[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new tmpAttribute.constructor(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new tmpMorphAttribute.constructor(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n\n/**\n * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,\n * non-indexed geometry. Returns the geometry with smooth normals everywhere except\n * faces that meet at an angle greater than the crease angle.\n *\n * @param {BufferGeometry} geometry\n * @param {number} [creaseAngle]\n * @return {BufferGeometry}\n */\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vectors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\t// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed\n\t// and returns the original geometry\n\tconst resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeAttributes,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;AAaA,SAAS,0BAA2B,QAAQ,EAAE,UAAU,EAAE,aAAa,IAAI;IAE1E,IAAK,CAAE,cAAc,CAAE,WAAW,OAAO,EAAG;QAE3C,MAAM,IAAI,MAAO;IAElB;IAEA,IAAK,CAAE,SAAS,YAAY,CAAE,eAAgB,CAAE,SAAS,YAAY,CAAE,aAAc,CAAE,SAAS,YAAY,CAAE,OAAS;QAEtH,MAAM,IAAI,MAAO;IAElB;IAEA,SAAS,kBAAmB,SAAS;QAEpC,IAAK,UAAU,UAAU,IAAI,UAAU,4BAA4B,EAAG;YAErE,MAAM,WAAW,IAAI,aAAc,UAAU,KAAK,GAAG,UAAU,QAAQ;YAEvE,IAAM,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,UAAU,KAAK,EAAE,IAAO;gBAEnD,QAAQ,CAAE,IAAM,GAAG,UAAU,IAAI,CAAE;gBACnC,QAAQ,CAAE,IAAM,GAAG,UAAU,IAAI,CAAE;gBAEnC,IAAK,UAAU,QAAQ,GAAG,GAAI;oBAE7B,QAAQ,CAAE,IAAM,GAAG,UAAU,IAAI,CAAE;gBAEpC;YAED;YAEA,OAAO;QAER;QAEA,IAAK,UAAU,KAAK,YAAY,cAAe;YAE9C,OAAO,UAAU,KAAK;QAEvB;QAEA,OAAO,IAAI,aAAc,UAAU,KAAK;IAEzC;IAEA,mDAAmD;IAEnD,MAAM,YAAY,SAAS,KAAK,GAAG,SAAS,YAAY,KAAK;IAE7D,2BAA2B;IAE3B,MAAM,WAAW,WAAW,gBAAgB,CAE3C,kBAAmB,UAAU,UAAU,CAAC,QAAQ,GAChD,kBAAmB,UAAU,UAAU,CAAC,MAAM,GAC9C,kBAAmB,UAAU,UAAU,CAAC,EAAE;IAI3C,kEAAkE;IAClE,mEAAmE;IAEnE,IAAK,YAAa;QAEjB,IAAM,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,KAAK,EAAI;YAE9C,QAAQ,CAAE,EAAG,IAAI,CAAE;QAEpB;IAED;IAEA,EAAE;IAEF,UAAU,YAAY,CAAE,WAAW,IAAI,+IAAA,CAAA,kBAAe,CAAE,UAAU;IAElE,IAAK,aAAa,WAAY;QAE7B,SAAS,IAAI,CAAE;IAEhB;IAEA,OAAO;AAER;AAEA;;;;CAIC,GACD,SAAS,gBAAiB,UAAU,EAAE,YAAY,KAAK;IAEtD,MAAM,YAAY,UAAU,CAAE,EAAG,CAAC,KAAK,KAAK;IAE5C,MAAM,iBAAiB,IAAI,IAAK,OAAO,IAAI,CAAE,UAAU,CAAE,EAAG,CAAC,UAAU;IACvE,MAAM,sBAAsB,IAAI,IAAK,OAAO,IAAI,CAAE,UAAU,CAAE,EAAG,CAAC,eAAe;IAEjF,MAAM,aAAa,CAAC;IACpB,MAAM,kBAAkB,CAAC;IAEzB,MAAM,uBAAuB,UAAU,CAAE,EAAG,CAAC,oBAAoB;IAEjE,MAAM,iBAAiB,IAAI,+IAAA,CAAA,iBAAc;IAEzC,IAAI,SAAS;IAEb,IAAM,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,EAAG,EAAI;QAE9C,MAAM,WAAW,UAAU,CAAE,EAAG;QAChC,IAAI,kBAAkB;QAEtB,kDAAkD;QAElD,IAAK,cAAc,CAAE,SAAS,KAAK,KAAK,IAAK,GAAI;YAEhD,QAAQ,KAAK,CAAE,iFAAiF,IAAI;YACpG,OAAO;QAER;QAEA,qDAAqD;QAErD,IAAM,MAAM,QAAQ,SAAS,UAAU,CAAG;YAEzC,IAAK,CAAE,eAAe,GAAG,CAAE,OAAS;gBAEnC,QAAQ,KAAK,CAAE,iFAAiF,IAAI,kEAAkE,OAAO;gBAC7K,OAAO;YAER;YAEA,IAAK,UAAU,CAAE,KAAM,KAAK,WAAY,UAAU,CAAE,KAAM,GAAG,EAAE;YAE/D,UAAU,CAAE,KAAM,CAAC,IAAI,CAAE,SAAS,UAAU,CAAE,KAAM;YAEpD;QAED;QAEA,uDAAuD;QAEvD,IAAK,oBAAoB,eAAe,IAAI,EAAG;YAE9C,QAAQ,KAAK,CAAE,iFAAiF,IAAI;YACpG,OAAO;QAER;QAEA,2DAA2D;QAE3D,IAAK,yBAAyB,SAAS,oBAAoB,EAAG;YAE7D,QAAQ,KAAK,CAAE,iFAAiF,IAAI;YACpG,OAAO;QAER;QAEA,IAAM,MAAM,QAAQ,SAAS,eAAe,CAAG;YAE9C,IAAK,CAAE,oBAAoB,GAAG,CAAE,OAAS;gBAExC,QAAQ,KAAK,CAAE,iFAAiF,IAAI;gBACpG,OAAO;YAER;YAEA,IAAK,eAAe,CAAE,KAAM,KAAK,WAAY,eAAe,CAAE,KAAM,GAAG,EAAE;YAEzE,eAAe,CAAE,KAAM,CAAC,IAAI,CAAE,SAAS,eAAe,CAAE,KAAM;QAE/D;QAEA,IAAK,WAAY;YAEhB,IAAI;YAEJ,IAAK,WAAY;gBAEhB,QAAQ,SAAS,KAAK,CAAC,KAAK;YAE7B,OAAO,IAAK,SAAS,UAAU,CAAC,QAAQ,KAAK,WAAY;gBAExD,QAAQ,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK;YAE3C,OAAO;gBAEN,QAAQ,KAAK,CAAE,iFAAiF,IAAI;gBACpG,OAAO;YAER;YAEA,eAAe,QAAQ,CAAE,QAAQ,OAAO;YAExC,UAAU;QAEX;IAED;IAEA,gBAAgB;IAEhB,IAAK,WAAY;QAEhB,IAAI,cAAc;QAClB,MAAM,cAAc,EAAE;QAEtB,IAAM,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,EAAG,EAAI;YAE9C,MAAM,QAAQ,UAAU,CAAE,EAAG,CAAC,KAAK;YAEnC,IAAM,IAAI,IAAI,GAAG,IAAI,MAAM,KAAK,EAAE,EAAG,EAAI;gBAExC,YAAY,IAAI,CAAE,MAAM,IAAI,CAAE,KAAM;YAErC;YAEA,eAAe,UAAU,CAAE,EAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK;QAEzD;QAEA,eAAe,QAAQ,CAAE;IAE1B;IAEA,mBAAmB;IAEnB,IAAM,MAAM,QAAQ,WAAa;QAEhC,MAAM,kBAAkB,gBAAiB,UAAU,CAAE,KAAM;QAE3D,IAAK,CAAE,iBAAkB;YAExB,QAAQ,KAAK,CAAE,oFAAoF,OAAO;YAC1G,OAAO;QAER;QAEA,eAAe,YAAY,CAAE,MAAM;IAEpC;IAEA,yBAAyB;IAEzB,IAAM,MAAM,QAAQ,gBAAkB;QAErC,MAAM,kBAAkB,eAAe,CAAE,KAAM,CAAE,EAAG,CAAC,MAAM;QAE3D,IAAK,oBAAoB,GAAI;QAE7B,eAAe,eAAe,GAAG,eAAe,eAAe,IAAI,CAAC;QACpE,eAAe,eAAe,CAAE,KAAM,GAAG,EAAE;QAE3C,IAAM,IAAI,IAAI,GAAG,IAAI,iBAAiB,EAAG,EAAI;YAE5C,MAAM,yBAAyB,EAAE;YAEjC,IAAM,IAAI,IAAI,GAAG,IAAI,eAAe,CAAE,KAAM,CAAC,MAAM,EAAE,EAAG,EAAI;gBAE3D,uBAAuB,IAAI,CAAE,eAAe,CAAE,KAAM,CAAE,EAAG,CAAE,EAAG;YAE/D;YAEA,MAAM,uBAAuB,gBAAiB;YAE9C,IAAK,CAAE,sBAAuB;gBAE7B,QAAQ,KAAK,CAAE,oFAAoF,OAAO;gBAC1G,OAAO;YAER;YAEA,eAAe,eAAe,CAAE,KAAM,CAAC,IAAI,CAAE;QAE9C;IAED;IAEA,OAAO;AAER;AAEA;;;CAGC,GACD,SAAS,gBAAiB,UAAU;IAEnC,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI,UAAU,CAAE;IAChB,IAAI,cAAc;IAElB,IAAM,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,EAAG,EAAI;QAE9C,MAAM,YAAY,UAAU,CAAE,EAAG;QAEjC,IAAK,eAAe,WAAY,aAAa,UAAU,KAAK,CAAC,WAAW;QACxE,IAAK,eAAe,UAAU,KAAK,CAAC,WAAW,EAAG;YAEjD,QAAQ,KAAK,CAAE;YACf,OAAO;QAER;QAEA,IAAK,aAAa,WAAY,WAAW,UAAU,QAAQ;QAC3D,IAAK,aAAa,UAAU,QAAQ,EAAG;YAEtC,QAAQ,KAAK,CAAE;YACf,OAAO;QAER;QAEA,IAAK,eAAe,WAAY,aAAa,UAAU,UAAU;QACjE,IAAK,eAAe,UAAU,UAAU,EAAG;YAE1C,QAAQ,KAAK,CAAE;YACf,OAAO;QAER;QAEA,IAAK,YAAY,CAAE,GAAI,UAAU,UAAU,OAAO;QAClD,IAAK,YAAY,UAAU,OAAO,EAAG;YAEpC,QAAQ,KAAK,CAAE;YACf,OAAO;QAER;QAEA,eAAe,UAAU,KAAK,GAAG;IAElC;IAEA,MAAM,QAAQ,IAAI,WAAY;IAC9B,MAAM,SAAS,IAAI,+IAAA,CAAA,kBAAe,CAAE,OAAO,UAAU;IACrD,IAAI,SAAS;IAEb,IAAM,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,EAAG,EAAI;QAE9C,MAAM,YAAY,UAAU,CAAE,EAAG;QACjC,IAAK,UAAU,4BAA4B,EAAG;YAE7C,MAAM,cAAc,SAAS;YAC7B,IAAM,IAAI,IAAI,GAAG,IAAI,UAAU,KAAK,EAAE,IAAI,GAAG,IAAO;gBAEnD,IAAM,IAAI,IAAI,GAAG,IAAI,UAAU,IAAO;oBAErC,MAAM,QAAQ,UAAU,YAAY,CAAE,GAAG;oBACzC,OAAO,YAAY,CAAE,IAAI,aAAa,GAAG;gBAE1C;YAED;QAED,OAAO;YAEN,MAAM,GAAG,CAAE,UAAU,KAAK,EAAE;QAE7B;QAEA,UAAU,UAAU,KAAK,GAAG;IAE7B;IAEA,IAAK,YAAY,WAAY;QAE5B,OAAO,OAAO,GAAG;IAElB;IAEA,OAAO;AAER;AAMO,SAAS,mBAAoB,SAAS;IAE5C,IAAK,UAAU,qCAAqC,IAAI,UAAU,4BAA4B,EAAG;QAEhG,OAAO,sBAAuB;IAE/B;IAEA,IAAK,UAAU,0BAA0B,EAAG;QAE3C,OAAO,IAAI,+IAAA,CAAA,2BAAwB,GAAG,IAAI,CAAE;IAE7C;IAEA,OAAO,IAAI,+IAAA,CAAA,kBAAe,GAAG,IAAI,CAAE;AAEpC;AAEA;;;CAGC,GACD,SAAS,qBAAsB,UAAU;IAExC,4EAA4E;IAC5E,0DAA0D;IAC1D,IAAI;IACJ,IAAI,cAAc;IAClB,IAAI,SAAS;IAEb,yDAAyD;IACzD,IAAM,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAI,GAAG,EAAG,EAAI;QAErD,MAAM,YAAY,UAAU,CAAE,EAAG;QAEjC,IAAK,eAAe,WAAY,aAAa,UAAU,KAAK,CAAC,WAAW;QACxE,IAAK,eAAe,UAAU,KAAK,CAAC,WAAW,EAAG;YAEjD,QAAQ,KAAK,CAAE;YACf,OAAO;QAER;QAEA,eAAe,UAAU,KAAK,CAAC,MAAM;QACrC,UAAU,UAAU,QAAQ;IAE7B;IAEA,sCAAsC;IACtC,MAAM,oBAAoB,IAAI,+IAAA,CAAA,oBAAiB,CAAE,IAAI,WAAY,cAAe;IAChF,IAAI,SAAS;IACb,MAAM,MAAM,EAAE;IACd,MAAM,UAAU;QAAE;QAAQ;QAAQ;QAAQ;KAAQ;IAClD,MAAM,UAAU;QAAE;QAAQ;QAAQ;QAAQ;KAAQ;IAElD,IAAM,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAI,GAAG,IAAO;QAErD,MAAM,YAAY,UAAU,CAAE,EAAG;QACjC,MAAM,WAAW,UAAU,QAAQ;QACnC,MAAM,QAAQ,UAAU,KAAK;QAC7B,MAAM,MAAM,IAAI,+IAAA,CAAA,6BAA0B,CAAE,mBAAmB,UAAU,QAAQ,UAAU,UAAU;QACrG,IAAI,IAAI,CAAE;QAEV,UAAU;QAEV,kEAAkE;QAClE,4BAA4B;QAC5B,IAAM,IAAI,IAAI,GAAG,IAAI,OAAO,IAAO;YAElC,IAAM,IAAI,IAAI,GAAG,IAAI,UAAU,IAAO;gBAErC,GAAG,CAAE,OAAO,CAAE,EAAG,CAAE,CAAE,GAAG,SAAS,CAAE,OAAO,CAAE,EAAG,CAAE,CAAE;YAEpD;QAED;IAED;IAEA,OAAO;AAER;AAGO,SAAS,sBAAuB,SAAS;IAE/C,MAAM,OAAO,UAAU,IAAI,CAAC,KAAK,CAAC,WAAW;IAC7C,MAAM,QAAQ,UAAU,KAAK;IAC7B,MAAM,WAAW,UAAU,QAAQ;IACnC,MAAM,aAAa,UAAU,UAAU;IAEvC,MAAM,QAAQ,IAAI,KAAM,QAAQ;IAChC,IAAI;IACJ,IAAK,UAAU,qCAAqC,EAAG;QAEtD,eAAe,IAAI,+IAAA,CAAA,2BAAwB,CAAE,OAAO,UAAU,YAAY,UAAU,gBAAgB;IAErG,OAAO;QAEN,eAAe,IAAI,+IAAA,CAAA,kBAAe,CAAE,OAAO,UAAU;IAEtD;IAEA,IAAM,IAAI,IAAI,GAAG,IAAI,OAAO,IAAO;QAElC,aAAa,IAAI,CAAE,GAAG,UAAU,IAAI,CAAE;QAEtC,IAAK,YAAY,GAAI;YAEpB,aAAa,IAAI,CAAE,GAAG,UAAU,IAAI,CAAE;QAEvC;QAEA,IAAK,YAAY,GAAI;YAEpB,aAAa,IAAI,CAAE,GAAG,UAAU,IAAI,CAAE;QAEvC;QAEA,IAAK,YAAY,GAAI;YAEpB,aAAa,IAAI,CAAE,GAAG,UAAU,IAAI,CAAE;QAEvC;IAED;IAEA,OAAO;AAER;AAGO,SAAS,qBAAsB,QAAQ;IAE7C,MAAM,aAAa,SAAS,UAAU;IACtC,MAAM,eAAe,SAAS,YAAY;IAC1C,MAAM,UAAU,IAAI;IAEpB,IAAM,MAAM,OAAO,WAAa;QAE/B,MAAM,OAAO,UAAU,CAAE,IAAK;QAC9B,IAAK,KAAK,4BAA4B,EAAG;YAExC,IAAK,CAAE,QAAQ,GAAG,CAAE,OAAS;gBAE5B,QAAQ,GAAG,CAAE,MAAM,sBAAuB;YAE3C;YAEA,UAAU,CAAE,IAAK,GAAG,QAAQ,GAAG,CAAE;QAElC;IAED;IAEA,IAAM,MAAM,OAAO,aAAe;QAEjC,MAAM,OAAO,YAAY,CAAE,IAAK;QAChC,IAAK,KAAK,4BAA4B,EAAG;YAExC,IAAK,CAAE,QAAQ,GAAG,CAAE,OAAS;gBAE5B,QAAQ,GAAG,CAAE,MAAM,sBAAuB;YAE3C;YAEA,YAAY,CAAE,IAAK,GAAG,QAAQ,GAAG,CAAE;QAEpC;IAED;AAED;AAEA;;;CAGC,GACD,SAAS,kBAAmB,QAAQ;IAEnC,6DAA6D;IAC7D,oEAAoE;IACpE,mCAAmC;IACnC,IAAI,MAAM;IACV,IAAM,MAAM,QAAQ,SAAS,UAAU,CAAG;QAEzC,MAAM,OAAO,SAAS,YAAY,CAAE;QACpC,OAAO,KAAK,KAAK,GAAG,KAAK,QAAQ,GAAG,KAAK,KAAK,CAAC,iBAAiB;IAEjE;IAEA,MAAM,UAAU,SAAS,QAAQ;IACjC,OAAO,UAAU,QAAQ,KAAK,GAAG,QAAQ,QAAQ,GAAG,QAAQ,KAAK,CAAC,iBAAiB,GAAG;IACtF,OAAO;AAER;AAEA;;;;CAIC,GACD,SAAS,cAAe,QAAQ,EAAE,YAAY,IAAI;IAEjD,YAAY,KAAK,GAAG,CAAE,WAAW,OAAO,OAAO;IAE/C,4EAA4E;IAC5E,6BAA6B;IAC7B,MAAM,cAAc,CAAC;IACrB,MAAM,UAAU,SAAS,QAAQ;IACjC,MAAM,YAAY,SAAS,YAAY,CAAE;IACzC,MAAM,cAAc,UAAU,QAAQ,KAAK,GAAG,UAAU,KAAK;IAE7D,kCAAkC;IAClC,IAAI,YAAY;IAEhB,sCAAsC;IACtC,MAAM,iBAAiB,OAAO,IAAI,CAAE,SAAS,UAAU;IACvD,MAAM,gBAAgB,CAAC;IACvB,MAAM,qBAAqB,CAAC;IAC5B,MAAM,aAAa,EAAE;IACrB,MAAM,UAAU;QAAE;QAAQ;QAAQ;QAAQ;KAAQ;IAClD,MAAM,UAAU;QAAE;QAAQ;QAAQ;QAAQ;KAAQ;IAElD,gEAAgE;IAChE,0CAA0C;IAC1C,IAAM,IAAI,IAAI,GAAG,IAAI,eAAe,MAAM,EAAE,IAAI,GAAG,IAAO;QAEzD,MAAM,OAAO,cAAc,CAAE,EAAG;QAChC,MAAM,OAAO,SAAS,UAAU,CAAE,KAAM;QAExC,aAAa,CAAE,KAAM,GAAG,IAAI,KAAK,WAAW,CAC3C,IAAI,KAAK,KAAK,CAAC,WAAW,CAAE,KAAK,KAAK,GAAG,KAAK,QAAQ,GACtD,KAAK,QAAQ,EACb,KAAK,UAAU;QAGhB,MAAM,kBAAkB,SAAS,eAAe,CAAE,KAAM;QACxD,IAAK,iBAAkB;YAEtB,IAAK,CAAE,kBAAkB,CAAE,KAAM,EAAG,kBAAkB,CAAE,KAAM,GAAG,EAAE;YACnE,gBAAgB,OAAO,CAAE,CAAE,WAAW;gBAErC,MAAM,QAAQ,IAAI,UAAU,KAAK,CAAC,WAAW,CAAE,UAAU,KAAK,GAAG,UAAU,QAAQ;gBACnF,kBAAkB,CAAE,KAAM,CAAE,EAAG,GAAG,IAAI,UAAU,WAAW,CAAE,OAAO,UAAU,QAAQ,EAAE,UAAU,UAAU;YAE7G;QAED;IAED;IAEA,4EAA4E;IAC5E,MAAM,gBAAgB,YAAY;IAClC,MAAM,WAAW,KAAK,KAAK,CAAE,IAAI;IACjC,MAAM,iBAAiB,KAAK,GAAG,CAAE,IAAI;IACrC,MAAM,eAAe,gBAAgB;IACrC,IAAM,IAAI,IAAI,GAAG,IAAI,aAAa,IAAO;QAExC,MAAM,QAAQ,UAAU,QAAQ,IAAI,CAAE,KAAM;QAE5C,qEAAqE;QACrE,IAAI,OAAO;QACX,IAAM,IAAI,IAAI,GAAG,IAAI,eAAe,MAAM,EAAE,IAAI,GAAG,IAAO;YAEzD,MAAM,OAAO,cAAc,CAAE,EAAG;YAChC,MAAM,YAAY,SAAS,YAAY,CAAE;YACzC,MAAM,WAAW,UAAU,QAAQ;YAEnC,IAAM,IAAI,IAAI,GAAG,IAAI,UAAU,IAAO;gBAErC,2CAA2C;gBAC3C,QAAQ,GAAI,CAAE,CAAE,CAAE,SAAS,CAAE,OAAO,CAAE,EAAG,CAAE,CAAE,SAAU,iBAAiB,YAAa,EAAG,CAAC,CAAC;YAE3F;QAED;QAEA,sDAAsD;QACtD,wBAAwB;QACxB,IAAK,QAAQ,aAAc;YAE1B,WAAW,IAAI,CAAE,WAAW,CAAE,KAAM;QAErC,OAAO;YAEN,yDAAyD;YACzD,IAAM,IAAI,IAAI,GAAG,IAAI,eAAe,MAAM,EAAE,IAAI,GAAG,IAAO;gBAEzD,MAAM,OAAO,cAAc,CAAE,EAAG;gBAChC,MAAM,YAAY,SAAS,YAAY,CAAE;gBACzC,MAAM,kBAAkB,SAAS,eAAe,CAAE,KAAM;gBACxD,MAAM,WAAW,UAAU,QAAQ;gBACnC,MAAM,WAAW,aAAa,CAAE,KAAM;gBACtC,MAAM,iBAAiB,kBAAkB,CAAE,KAAM;gBAEjD,IAAM,IAAI,IAAI,GAAG,IAAI,UAAU,IAAO;oBAErC,MAAM,aAAa,OAAO,CAAE,EAAG;oBAC/B,MAAM,aAAa,OAAO,CAAE,EAAG;oBAC/B,QAAQ,CAAE,WAAY,CAAE,WAAW,SAAS,CAAE,WAAY,CAAE;oBAE5D,IAAK,iBAAkB;wBAEtB,IAAM,IAAI,IAAI,GAAG,KAAK,gBAAgB,MAAM,EAAE,IAAI,IAAI,IAAO;4BAE5D,cAAc,CAAE,EAAG,CAAE,WAAY,CAAE,WAAW,eAAe,CAAE,EAAG,CAAE,WAAY,CAAE;wBAEnF;oBAED;gBAED;YAED;YAEA,WAAW,CAAE,KAAM,GAAG;YACtB,WAAW,IAAI,CAAE;YACjB;QAED;IAED;IAEA,iCAAiC;IACjC,MAAM,SAAS,SAAS,KAAK;IAC7B,IAAM,MAAM,QAAQ,SAAS,UAAU,CAAG;QAEzC,MAAM,eAAe,aAAa,CAAE,KAAM;QAE1C,OAAO,YAAY,CAAE,MAAM,IAAI,aAAa,WAAW,CACtD,aAAa,KAAK,CAAC,KAAK,CAAE,GAAG,YAAY,aAAa,QAAQ,GAC9D,aAAa,QAAQ,EACrB,aAAa,UAAU;QAGxB,IAAK,CAAE,CAAE,QAAQ,kBAAmB,GAAI;QAExC,IAAM,IAAI,IAAI,GAAG,IAAI,kBAAkB,CAAE,KAAM,CAAC,MAAM,EAAE,IAAO;YAE9D,MAAM,oBAAoB,kBAAkB,CAAE,KAAM,CAAE,EAAG;YAEzD,OAAO,eAAe,CAAE,KAAM,CAAE,EAAG,GAAG,IAAI,kBAAkB,WAAW,CACtE,kBAAkB,KAAK,CAAC,KAAK,CAAE,GAAG,YAAY,kBAAkB,QAAQ,GACxE,kBAAkB,QAAQ,EAC1B,kBAAkB,UAAU;QAG9B;IAED;IAEA,UAAU;IAEV,OAAO,QAAQ,CAAE;IAEjB,OAAO;AAER;AAEA;;;;CAIC,GACD,SAAS,oBAAqB,QAAQ,EAAE,QAAQ;IAE/C,IAAK,aAAa,+IAAA,CAAA,oBAAiB,EAAG;QAErC,QAAQ,IAAI,CAAE;QACd,OAAO;IAER;IAEA,IAAK,aAAa,+IAAA,CAAA,sBAAmB,IAAI,aAAa,+IAAA,CAAA,wBAAqB,EAAG;QAE7E,IAAI,QAAQ,SAAS,QAAQ;QAE7B,gCAAgC;QAEhC,IAAK,UAAU,MAAO;YAErB,MAAM,UAAU,EAAE;YAElB,MAAM,WAAW,SAAS,YAAY,CAAE;YAExC,IAAK,aAAa,WAAY;gBAE7B,IAAM,IAAI,IAAI,GAAG,IAAI,SAAS,KAAK,EAAE,IAAO;oBAE3C,QAAQ,IAAI,CAAE;gBAEf;gBAEA,SAAS,QAAQ,CAAE;gBACnB,QAAQ,SAAS,QAAQ;YAE1B,OAAO;gBAEN,QAAQ,KAAK,CAAE;gBACf,OAAO;YAER;QAED;QAEA,EAAE;QAEF,MAAM,oBAAoB,MAAM,KAAK,GAAG;QACxC,MAAM,aAAa,EAAE;QAErB,IAAK,aAAa,+IAAA,CAAA,sBAAmB,EAAG;YAEvC,kBAAkB;YAElB,IAAM,IAAI,IAAI,GAAG,KAAK,mBAAmB,IAAO;gBAE/C,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE;gBAC7B,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE;gBAC7B,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE,IAAI;YAElC;QAED,OAAO;YAEN,oBAAoB;YAEpB,IAAM,IAAI,IAAI,GAAG,IAAI,mBAAmB,IAAO;gBAE9C,IAAK,IAAI,MAAM,GAAI;oBAElB,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE;oBAC7B,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE,IAAI;oBACjC,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE,IAAI;gBAElC,OAAO;oBAEN,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE,IAAI;oBACjC,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE,IAAI;oBACjC,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE;gBAE9B;YAED;QAED;QAEA,IAAK,AAAE,WAAW,MAAM,GAAG,MAAQ,mBAAoB;YAEtD,QAAQ,KAAK,CAAE;QAEhB;QAEA,uBAAuB;QAEvB,MAAM,cAAc,SAAS,KAAK;QAClC,YAAY,QAAQ,CAAE;QACtB,YAAY,WAAW;QAEvB,OAAO;IAER,OAAO;QAEN,QAAQ,KAAK,CAAE,uEAAuE;QACtF,OAAO;IAER;AAED;AAEA;;;;;CAKC,GACD,SAAS,yBAA0B,MAAM;IAExC,MAAM,MAAM,IAAI,+IAAA,CAAA,UAAO;IACvB,MAAM,MAAM,IAAI,+IAAA,CAAA,UAAO;IACvB,MAAM,MAAM,IAAI,+IAAA,CAAA,UAAO;IAEvB,MAAM,SAAS,IAAI,+IAAA,CAAA,UAAO;IAC1B,MAAM,SAAS,IAAI,+IAAA,CAAA,UAAO;IAC1B,MAAM,SAAS,IAAI,+IAAA,CAAA,UAAO;IAE1B,MAAM,UAAU,IAAI,+IAAA,CAAA,UAAO;IAC3B,MAAM,UAAU,IAAI,+IAAA,CAAA,UAAO;IAC3B,MAAM,UAAU,IAAI,+IAAA,CAAA,UAAO;IAE3B,SAAS,+BACR,MAAM,EACN,SAAS,EACT,cAAc,EACd,oBAAoB,EACpB,CAAC,EACD,CAAC,EACD,CAAC,EACD,sBAAsB;QAGtB,IAAI,mBAAmB,CAAE,WAAW;QACpC,IAAI,mBAAmB,CAAE,WAAW;QACpC,IAAI,mBAAmB,CAAE,WAAW;QAEpC,MAAM,kBAAkB,OAAO,qBAAqB;QAEpD,IAAK,kBAAkB,iBAAkB;YAExC,QAAQ,GAAG,CAAE,GAAG,GAAG;YACnB,QAAQ,GAAG,CAAE,GAAG,GAAG;YACnB,QAAQ,GAAG,CAAE,GAAG,GAAG;YAEnB,IAAM,IAAI,IAAI,GAAG,KAAK,eAAe,MAAM,EAAE,IAAI,IAAI,IAAO;gBAE3D,MAAM,YAAY,eAAe,CAAE,EAAG;gBACtC,MAAM,QAAQ,cAAc,CAAE,EAAG;gBAEjC,IAAK,cAAc,GAAI;gBAEvB,OAAO,mBAAmB,CAAE,OAAO;gBACnC,OAAO,mBAAmB,CAAE,OAAO;gBACnC,OAAO,mBAAmB,CAAE,OAAO;gBAEnC,IAAK,sBAAuB;oBAE3B,QAAQ,eAAe,CAAE,QAAQ;oBACjC,QAAQ,eAAe,CAAE,QAAQ;oBACjC,QAAQ,eAAe,CAAE,QAAQ;gBAElC,OAAO;oBAEN,QAAQ,eAAe,CAAE,OAAO,GAAG,CAAE,MAAO;oBAC5C,QAAQ,eAAe,CAAE,OAAO,GAAG,CAAE,MAAO;oBAC5C,QAAQ,eAAe,CAAE,OAAO,GAAG,CAAE,MAAO;gBAE7C;YAED;YAEA,IAAI,GAAG,CAAE;YACT,IAAI,GAAG,CAAE;YACT,IAAI,GAAG,CAAE;QAEV;QAEA,IAAK,OAAO,aAAa,EAAG;YAE3B,OAAO,kBAAkB,CAAE,GAAG;YAC9B,OAAO,kBAAkB,CAAE,GAAG;YAC9B,OAAO,kBAAkB,CAAE,GAAG;QAE/B;QAEA,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;QAC3C,sBAAsB,CAAE,IAAI,IAAI,EAAG,GAAG,IAAI,CAAC;IAE5C;IAEA,MAAM,WAAW,OAAO,QAAQ;IAChC,MAAM,WAAW,OAAO,QAAQ;IAEhC,IAAI,GAAG,GAAG;IACV,MAAM,QAAQ,SAAS,KAAK;IAC5B,MAAM,oBAAoB,SAAS,UAAU,CAAC,QAAQ;IACtD,MAAM,gBAAgB,SAAS,eAAe,CAAC,QAAQ;IACvD,MAAM,uBAAuB,SAAS,oBAAoB;IAC1D,MAAM,kBAAkB,SAAS,UAAU,CAAC,MAAM;IAClD,MAAM,cAAc,SAAS,eAAe,CAAC,QAAQ;IAErD,MAAM,SAAS,SAAS,MAAM;IAC9B,MAAM,YAAY,SAAS,SAAS;IACpC,IAAI,GAAG,GAAG,IAAI;IACd,IAAI;IACJ,IAAI,OAAO;IAEX,MAAM,mBAAmB,IAAI,aAAc,kBAAkB,KAAK,GAAG,kBAAkB,QAAQ;IAC/F,MAAM,iBAAiB,IAAI,aAAc,gBAAgB,KAAK,GAAG,gBAAgB,QAAQ;IAEzF,IAAK,UAAU,MAAO;QAErB,0BAA0B;QAE1B,IAAK,MAAM,OAAO,CAAE,WAAa;YAEhC,IAAM,IAAI,GAAG,KAAK,OAAO,MAAM,EAAE,IAAI,IAAI,IAAO;gBAE/C,QAAQ,MAAM,CAAE,EAAG;gBAEnB,QAAQ,KAAK,GAAG,CAAE,MAAM,KAAK,EAAE,UAAU,KAAK;gBAC9C,MAAM,KAAK,GAAG,CAAI,MAAM,KAAK,GAAG,MAAM,KAAK,EAAM,UAAU,KAAK,GAAG,UAAU,KAAK;gBAElF,IAAM,IAAI,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,EAAI;oBAE3C,IAAI,MAAM,IAAI,CAAE;oBAChB,IAAI,MAAM,IAAI,CAAE,IAAI;oBACpB,IAAI,MAAM,IAAI,CAAE,IAAI;oBAEpB,+BACC,QACA,mBACA,eACA,sBACA,GAAG,GAAG,GACN;oBAGD,+BACC,QACA,iBACA,aACA,sBACA,GAAG,GAAG,GACN;gBAGF;YAED;QAED,OAAO;YAEN,QAAQ,KAAK,GAAG,CAAE,GAAG,UAAU,KAAK;YACpC,MAAM,KAAK,GAAG,CAAE,MAAM,KAAK,EAAI,UAAU,KAAK,GAAG,UAAU,KAAK;YAEhE,IAAM,IAAI,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,EAAI;gBAE3C,IAAI,MAAM,IAAI,CAAE;gBAChB,IAAI,MAAM,IAAI,CAAE,IAAI;gBACpB,IAAI,MAAM,IAAI,CAAE,IAAI;gBAEpB,+BACC,QACA,mBACA,eACA,sBACA,GAAG,GAAG,GACN;gBAGD,+BACC,QACA,iBACA,aACA,sBACA,GAAG,GAAG,GACN;YAGF;QAED;IAED,OAAO;QAEN,8BAA8B;QAE9B,IAAK,MAAM,OAAO,CAAE,WAAa;YAEhC,IAAM,IAAI,GAAG,KAAK,OAAO,MAAM,EAAE,IAAI,IAAI,IAAO;gBAE/C,QAAQ,MAAM,CAAE,EAAG;gBAEnB,QAAQ,KAAK,GAAG,CAAE,MAAM,KAAK,EAAE,UAAU,KAAK;gBAC9C,MAAM,KAAK,GAAG,CAAI,MAAM,KAAK,GAAG,MAAM,KAAK,EAAM,UAAU,KAAK,GAAG,UAAU,KAAK;gBAElF,IAAM,IAAI,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,EAAI;oBAE3C,IAAI;oBACJ,IAAI,IAAI;oBACR,IAAI,IAAI;oBAER,+BACC,QACA,mBACA,eACA,sBACA,GAAG,GAAG,GACN;oBAGD,+BACC,QACA,iBACA,aACA,sBACA,GAAG,GAAG,GACN;gBAGF;YAED;QAED,OAAO;YAEN,QAAQ,KAAK,GAAG,CAAE,GAAG,UAAU,KAAK;YACpC,MAAM,KAAK,GAAG,CAAE,kBAAkB,KAAK,EAAI,UAAU,KAAK,GAAG,UAAU,KAAK;YAE5E,IAAM,IAAI,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,EAAI;gBAE3C,IAAI;gBACJ,IAAI,IAAI;gBACR,IAAI,IAAI;gBAER,+BACC,QACA,mBACA,eACA,sBACA,GAAG,GAAG,GACN;gBAGD,+BACC,QACA,iBACA,aACA,sBACA,GAAG,GAAG,GACN;YAGF;QAED;IAED;IAEA,MAAM,2BAA2B,IAAI,+IAAA,CAAA,yBAAsB,CAAE,kBAAkB;IAC/E,MAAM,yBAAyB,IAAI,+IAAA,CAAA,yBAAsB,CAAE,gBAAgB;IAE3E,OAAO;QAEN,mBAAmB;QACnB,iBAAiB;QACjB,0BAA0B;QAC1B,wBAAwB;IAEzB;AAED;AAEA,SAAS,YAAa,QAAQ;IAE7B,IAAK,SAAS,MAAM,CAAC,MAAM,KAAK,GAAI;QAEnC,QAAQ,IAAI,CAAE;QACd,OAAO;IAER;IAEA,IAAI,SAAS,SAAS,MAAM;IAE5B,gCAAgC;IAEhC,SAAS,OAAO,IAAI,CAAE,CAAE,GAAG;QAE1B,IAAK,EAAE,aAAa,KAAK,EAAE,aAAa,EAAG,OAAO,EAAE,aAAa,GAAG,EAAE,aAAa;QAEnF,OAAO,EAAE,KAAK,GAAG,EAAE,KAAK;IAEzB;IAEA,0CAA0C;IAE1C,IAAK,SAAS,QAAQ,OAAO,MAAO;QAEnC,MAAM,oBAAoB,SAAS,YAAY,CAAE;QACjD,MAAM,UAAU,EAAE;QAElB,IAAM,IAAI,IAAI,GAAG,IAAI,kBAAkB,KAAK,EAAE,KAAK,EAAI;YAEtD,QAAQ,IAAI,CAAE,GAAG,IAAI,GAAG,IAAI;QAE7B;QAEA,SAAS,QAAQ,CAAE;IAEpB;IAEA,aAAa;IAEb,MAAM,QAAQ,SAAS,QAAQ;IAE/B,MAAM,aAAa,EAAE;IAErB,IAAM,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAO;QAE1C,MAAM,QAAQ,MAAM,CAAE,EAAG;QAEzB,MAAM,aAAa,MAAM,KAAK;QAC9B,MAAM,cAAc,aAAa,MAAM,KAAK;QAE5C,IAAM,IAAI,IAAI,YAAY,IAAI,aAAa,IAAO;YAEjD,WAAW,IAAI,CAAE,MAAM,IAAI,CAAE;QAE9B;IAED;IAEA,SAAS,OAAO,IAAI,sCAAsC;IAC1D,SAAS,QAAQ,CAAE;IAEnB,wBAAwB;IAExB,IAAI,QAAQ;IAEZ,IAAM,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAO;QAE1C,MAAM,QAAQ,MAAM,CAAE,EAAG;QAEzB,MAAM,KAAK,GAAG;QACd,SAAS,MAAM,KAAK;IAErB;IAEA,eAAe;IAEf,IAAI,eAAe,MAAM,CAAE,EAAG;IAE9B,SAAS,MAAM,GAAG;QAAE;KAAc;IAElC,IAAM,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAO;QAE1C,MAAM,QAAQ,MAAM,CAAE,EAAG;QAEzB,IAAK,aAAa,aAAa,KAAK,MAAM,aAAa,EAAG;YAEzD,aAAa,KAAK,IAAI,MAAM,KAAK;QAElC,OAAO;YAEN,eAAe;YACf,SAAS,MAAM,CAAC,IAAI,CAAE;QAEvB;IAED;IAEA,OAAO;AAER;AAGA;;;;;;;;CAQC,GACD,SAAS,iBAAkB,QAAQ,EAAE,cAAc,KAAK,EAAE,GAAG,EAAE,cAAc,GAAf;IAE7D,MAAM,YAAY,KAAK,GAAG,CAAE;IAC5B,MAAM,iBAAiB,CAAE,IAAI,KAAM,IAAI;IAEvC,mBAAmB;IACnB,MAAM,QAAQ;QAAE,IAAI,+IAAA,CAAA,UAAO;QAAI,IAAI,+IAAA,CAAA,UAAO;QAAI,IAAI,+IAAA,CAAA,UAAO;KAAI;IAC7D,MAAM,WAAW,IAAI,+IAAA,CAAA,UAAO;IAC5B,MAAM,WAAW,IAAI,+IAAA,CAAA,UAAO;IAC5B,MAAM,WAAW,IAAI,+IAAA,CAAA,UAAO;IAC5B,MAAM,YAAY,IAAI,+IAAA,CAAA,UAAO;IAE7B,kBAAkB;IAClB,SAAS,WAAY,CAAC;QAErB,MAAM,IAAI,CAAE,CAAE,CAAE,EAAE,CAAC,GAAG,cAAe;QACrC,MAAM,IAAI,CAAE,CAAE,CAAE,EAAE,CAAC,GAAG,cAAe;QACrC,MAAM,IAAI,CAAE,CAAE,CAAE,EAAE,CAAC,GAAG,cAAe;QACrC,OAAO,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG;IAExB;IAEA,qEAAqE;IACrE,oCAAoC;IACpC,MAAM,iBAAiB,SAAS,KAAK,GAAG,SAAS,YAAY,KAAK;IAClE,MAAM,UAAU,eAAe,UAAU,CAAC,QAAQ;IAClD,MAAM,YAAY,CAAC;IAEnB,2DAA2D;IAC3D,IAAM,IAAI,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG,GAAG,IAAI,GAAG,IAAO;QAErD,MAAM,KAAK,IAAI;QACf,MAAM,IAAI,KAAK,CAAE,EAAG,CAAC,mBAAmB,CAAE,SAAS,KAAK;QACxD,MAAM,IAAI,KAAK,CAAE,EAAG,CAAC,mBAAmB,CAAE,SAAS,KAAK;QACxD,MAAM,IAAI,KAAK,CAAE,EAAG,CAAC,mBAAmB,CAAE,SAAS,KAAK;QAExD,SAAS,UAAU,CAAE,GAAG;QACxB,SAAS,UAAU,CAAE,GAAG;QAExB,6CAA6C;QAC7C,MAAM,SAAS,IAAI,+IAAA,CAAA,UAAO,GAAG,YAAY,CAAE,UAAU,UAAW,SAAS;QACzE,IAAM,IAAI,IAAI,GAAG,IAAI,GAAG,IAAO;YAE9B,MAAM,OAAO,KAAK,CAAE,EAAG;YACvB,MAAM,OAAO,WAAY;YACzB,IAAK,CAAE,CAAE,QAAQ,SAAU,GAAI;gBAE9B,SAAS,CAAE,KAAM,GAAG,EAAE;YAEvB;YAEA,SAAS,CAAE,KAAM,CAAC,IAAI,CAAE;QAEzB;IAED;IAEA,wFAAwF;IACxF,4BAA4B;IAC5B,MAAM,cAAc,IAAI,aAAc,QAAQ,KAAK,GAAG;IACtD,MAAM,WAAW,IAAI,+IAAA,CAAA,kBAAe,CAAE,aAAa,GAAG;IACtD,IAAM,IAAI,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG,GAAG,IAAI,GAAG,IAAO;QAErD,sCAAsC;QACtC,MAAM,KAAK,IAAI;QACf,MAAM,IAAI,KAAK,CAAE,EAAG,CAAC,mBAAmB,CAAE,SAAS,KAAK;QACxD,MAAM,IAAI,KAAK,CAAE,EAAG,CAAC,mBAAmB,CAAE,SAAS,KAAK;QACxD,MAAM,IAAI,KAAK,CAAE,EAAG,CAAC,mBAAmB,CAAE,SAAS,KAAK;QAExD,SAAS,UAAU,CAAE,GAAG;QACxB,SAAS,UAAU,CAAE,GAAG;QAExB,SAAS,YAAY,CAAE,UAAU,UAAW,SAAS;QAErD,uEAAuE;QACvE,IAAM,IAAI,IAAI,GAAG,IAAI,GAAG,IAAO;YAE9B,MAAM,OAAO,KAAK,CAAE,EAAG;YACvB,MAAM,OAAO,WAAY;YACzB,MAAM,eAAe,SAAS,CAAE,KAAM;YACtC,UAAU,GAAG,CAAE,GAAG,GAAG;YAErB,IAAM,IAAI,IAAI,GAAG,KAAK,aAAa,MAAM,EAAE,IAAI,IAAI,IAAO;gBAEzD,MAAM,YAAY,YAAY,CAAE,EAAG;gBACnC,IAAK,SAAS,GAAG,CAAE,aAAc,WAAY;oBAE5C,UAAU,GAAG,CAAE;gBAEhB;YAED;YAEA,UAAU,SAAS;YACnB,SAAS,MAAM,CAAE,KAAK,GAAG,UAAU,CAAC,EAAE,UAAU,CAAC,EAAE,UAAU,CAAC;QAE/D;IAED;IAEA,eAAe,YAAY,CAAE,UAAU;IACvC,OAAO;AAER","ignoreList":[0]}},
    {"offset": {"line": 805, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 811, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/lines/LineSegmentsGeometry.js"],"sourcesContent":["import {\n\tBox3,\n\tFloat32BufferAttribute,\n\tInstancedBufferGeometry,\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tSphere,\n\tVector3,\n\tWireframeGeometry\n} from 'three';\n\nconst _box = new Box3();\nconst _vector = new Vector3();\n\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isLineSegmentsGeometry = true;\n\n\t\tthis.type = 'LineSegmentsGeometry';\n\n\t\tconst positions = [ - 1, 2, 0, 1, 2, 0, - 1, 1, 0, 1, 1, 0, - 1, 0, 0, 1, 0, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\t\tconst uvs = [ - 1, 2, 1, 2, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 2, 1, - 2 ];\n\t\tconst index = [ 0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5 ];\n\n\t\tthis.setIndex( index );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst start = this.attributes.instanceStart;\n\t\tconst end = this.attributes.instanceEnd;\n\n\t\tif ( start !== undefined ) {\n\n\t\t\tstart.applyMatrix4( matrix );\n\n\t\t\tend.applyMatrix4( matrix );\n\n\t\t\tstart.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetPositions( array ) {\n\n\t\tlet lineSegments;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\tlineSegments = array;\n\n\t\t} else if ( Array.isArray( array ) ) {\n\n\t\t\tlineSegments = new Float32Array( array );\n\n\t\t}\n\n\t\tconst instanceBuffer = new InstancedInterleavedBuffer( lineSegments, 6, 1 ); // xyz, xyz\n\n\t\tthis.setAttribute( 'instanceStart', new InterleavedBufferAttribute( instanceBuffer, 3, 0 ) ); // xyz\n\t\tthis.setAttribute( 'instanceEnd', new InterleavedBufferAttribute( instanceBuffer, 3, 3 ) ); // xyz\n\n\t\tthis.instanceCount = this.attributes.instanceStart.count;\n\n\t\t//\n\n\t\tthis.computeBoundingBox();\n\t\tthis.computeBoundingSphere();\n\n\t\treturn this;\n\n\t}\n\n\tsetColors( array ) {\n\n\t\tlet colors;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\tcolors = array;\n\n\t\t} else if ( Array.isArray( array ) ) {\n\n\t\t\tcolors = new Float32Array( array );\n\n\t\t}\n\n\t\tconst instanceColorBuffer = new InstancedInterleavedBuffer( colors, 6, 1 ); // rgb, rgb\n\n\t\tthis.setAttribute( 'instanceColorStart', new InterleavedBufferAttribute( instanceColorBuffer, 3, 0 ) ); // rgb\n\t\tthis.setAttribute( 'instanceColorEnd', new InterleavedBufferAttribute( instanceColorBuffer, 3, 3 ) ); // rgb\n\n\t\treturn this;\n\n\t}\n\n\tfromWireframeGeometry( geometry ) {\n\n\t\tthis.setPositions( geometry.attributes.position.array );\n\n\t\treturn this;\n\n\t}\n\n\tfromEdgesGeometry( geometry ) {\n\n\t\tthis.setPositions( geometry.attributes.position.array );\n\n\t\treturn this;\n\n\t}\n\n\tfromMesh( mesh ) {\n\n\t\tthis.fromWireframeGeometry( new WireframeGeometry( mesh.geometry ) );\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n\tfromLineSegments( lineSegments ) {\n\n\t\tconst geometry = lineSegments.geometry;\n\n\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst start = this.attributes.instanceStart;\n\t\tconst end = this.attributes.instanceEnd;\n\n\t\tif ( start !== undefined && end !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( start );\n\n\t\t\t_box.setFromBufferAttribute( end );\n\n\t\t\tthis.boundingBox.union( _box );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tconst start = this.attributes.instanceStart;\n\t\tconst end = this.attributes.instanceEnd;\n\n\t\tif ( start !== undefined && end !== undefined ) {\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\tthis.boundingBox.getCenter( center );\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = start.count; i < il; i ++ ) {\n\n\t\t\t\t_vector.fromBufferAttribute( start, i );\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\n\n\t\t\t\t_vector.fromBufferAttribute( end, i );\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\t// todo\n\n\t}\n\n\tapplyMatrix( matrix ) {\n\n\t\tconsole.warn( 'THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().' );\n\n\t\treturn this.applyMatrix4( matrix );\n\n\t}\n\n}\n\nexport { LineSegmentsGeometry };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1000, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1006, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/lines/LineGeometry.js"],"sourcesContent":["import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isLineGeometry = true;\n\n\t\tthis.type = 'LineGeometry';\n\n\t}\n\n\tsetPositions( array ) {\n\n\t\t// converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst points = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tpoints[ 2 * i ] = array[ i ];\n\t\t\tpoints[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tpoints[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tpoints[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tpoints[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tpoints[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setPositions( points );\n\n\t\treturn this;\n\n\t}\n\n\tsetColors( array ) {\n\n\t\t// converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst colors = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tcolors[ 2 * i ] = array[ i ];\n\t\t\tcolors[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tcolors[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tcolors[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tcolors[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tcolors[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setColors( colors );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\t// converts a vector3 or vector2 array to pairs format\n\n\t\tconst length = points.length - 1;\n\t\tconst positions = new Float32Array( 6 * length );\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tpositions[ 6 * i ] = points[ i ].x;\n\t\t\tpositions[ 6 * i + 1 ] = points[ i ].y;\n\t\t\tpositions[ 6 * i + 2 ] = points[ i ].z || 0;\n\n\t\t\tpositions[ 6 * i + 3 ] = points[ i + 1 ].x;\n\t\t\tpositions[ 6 * i + 4 ] = points[ i + 1 ].y;\n\t\t\tpositions[ 6 * i + 5 ] = points[ i + 1 ].z || 0;\n\n\t\t}\n\n\t\tsuper.setPositions( positions );\n\n\t\treturn this;\n\n\t}\n\n\tfromLine( line ) {\n\n\t\tconst geometry = line.geometry;\n\n\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineGeometry };\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,qBAAqB,yKAAA,CAAA,uBAAoB;IAE9C,aAAc;QAEb,KAAK;QAEL,IAAI,CAAC,cAAc,GAAG;QAEtB,IAAI,CAAC,IAAI,GAAG;IAEb;IAEA,aAAc,KAAK,EAAG;QAErB,4DAA4D;QAE5D,MAAM,SAAS,MAAM,MAAM,GAAG;QAC9B,MAAM,SAAS,IAAI,aAAc,IAAI;QAErC,IAAM,IAAI,IAAI,GAAG,IAAI,QAAQ,KAAK,EAAI;YAErC,MAAM,CAAE,IAAI,EAAG,GAAG,KAAK,CAAE,EAAG;YAC5B,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YACpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YAEpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YACpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YACpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;QAErC;QAEA,KAAK,CAAC,aAAc;QAEpB,OAAO,IAAI;IAEZ;IAEA,UAAW,KAAK,EAAG;QAElB,4DAA4D;QAE5D,MAAM,SAAS,MAAM,MAAM,GAAG;QAC9B,MAAM,SAAS,IAAI,aAAc,IAAI;QAErC,IAAM,IAAI,IAAI,GAAG,IAAI,QAAQ,KAAK,EAAI;YAErC,MAAM,CAAE,IAAI,EAAG,GAAG,KAAK,CAAE,EAAG;YAC5B,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YACpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YAEpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YACpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;YACpC,MAAM,CAAE,IAAI,IAAI,EAAG,GAAG,KAAK,CAAE,IAAI,EAAG;QAErC;QAEA,KAAK,CAAC,UAAW;QAEjB,OAAO,IAAI;IAEZ;IAEA,cAAe,MAAM,EAAG;QAEvB,sDAAsD;QAEtD,MAAM,SAAS,OAAO,MAAM,GAAG;QAC/B,MAAM,YAAY,IAAI,aAAc,IAAI;QAExC,IAAM,IAAI,IAAI,GAAG,IAAI,QAAQ,IAAO;YAEnC,SAAS,CAAE,IAAI,EAAG,GAAG,MAAM,CAAE,EAAG,CAAC,CAAC;YAClC,SAAS,CAAE,IAAI,IAAI,EAAG,GAAG,MAAM,CAAE,EAAG,CAAC,CAAC;YACtC,SAAS,CAAE,IAAI,IAAI,EAAG,GAAG,MAAM,CAAE,EAAG,CAAC,CAAC,IAAI;YAE1C,SAAS,CAAE,IAAI,IAAI,EAAG,GAAG,MAAM,CAAE,IAAI,EAAG,CAAC,CAAC;YAC1C,SAAS,CAAE,IAAI,IAAI,EAAG,GAAG,MAAM,CAAE,IAAI,EAAG,CAAC,CAAC;YAC1C,SAAS,CAAE,IAAI,IAAI,EAAG,GAAG,MAAM,CAAE,IAAI,EAAG,CAAC,CAAC,IAAI;QAE/C;QAEA,KAAK,CAAC,aAAc;QAEpB,OAAO,IAAI;IAEZ;IAEA,SAAU,IAAI,EAAG;QAEhB,MAAM,WAAW,KAAK,QAAQ;QAE9B,IAAI,CAAC,YAAY,CAAE,SAAS,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAI,sBAAsB;QAE/E,oBAAoB;QAEpB,OAAO,IAAI;IAEZ;AAED","ignoreList":[0]}},
    {"offset": {"line": 1070, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1076, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/lines/LineMaterial.js"],"sourcesContent":["import {\n\tShaderLib,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector2,\n} from 'three';\n\nUniformsLib.line = {\n\n\tworldUnits: { value: 1 },\n\tlinewidth: { value: 1 },\n\tresolution: { value: new Vector2( 1, 1 ) },\n\tdashOffset: { value: 0 },\n\tdashScale: { value: 1 },\n\tdashSize: { value: 1 },\n\tgapSize: { value: 1 } // todo FIX - maybe change to totalSize\n\n};\n\nShaderLib[ 'line' ] = {\n\n\tuniforms: UniformsUtils.merge( [\n\t\tUniformsLib.common,\n\t\tUniformsLib.fog,\n\t\tUniformsLib.line\n\t] ),\n\n\tvertexShader:\n\t/* glsl */`\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tworldStart = start.xyz;\n\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t#else\n\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\tvec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );\n\t\t\t\tvec3 worldUp = normalize( cross( worldDir, tmpFwd ) );\n\t\t\t\tvec3 worldFwd = cross( worldDir, worldUp );\n\t\t\t\tworldPos = position.y < 0.5 ? start: end;\n\n\t\t\t\t// height offset\n\t\t\t\tfloat hw = linewidth * 0.5;\n\t\t\t\tworldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t// cap extension\n\t\t\t\t\tworldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;\n\n\t\t\t\t\t// add width to the box\n\t\t\t\t\tworldPos.xyz += worldFwd * hw;\n\n\t\t\t\t\t// endcaps\n\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\tworldPos.xyz -= worldFwd * 2.0 * hw;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t\t// project the worldpos\n\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t#else\n\n\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x /= aspect;\n\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\toffset += - dir;\n\n\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\toffset += dir;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth;\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t// select end\n\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset *= clip.w;\n\n\t\t\t\tclip.xy += offset;\n\n\t\t\t#endif\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n\n\tfragmentShader:\n\t/* glsl */`\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float linewidth;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\tfloat mua;\n\t\t\tfloat mub;\n\n\t\t\tvec3 p13 = p1 - p3;\n\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\tmua = numer / denom;\n\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tfloat alpha = opacity;\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\tfloat len = length( delta );\n\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#endif\n\n\t\t\t#else\n\n\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t#else\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\n\nclass LineMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\ttype: 'LineMaterial',\n\t\t\tuniforms: UniformsUtils.clone( ShaderLib[ 'line' ].uniforms ),\n\n\t\t\tvertexShader: ShaderLib[ 'line' ].vertexShader,\n\t\t\tfragmentShader: ShaderLib[ 'line' ].fragmentShader,\n\n\t\t\tclipping: true // required for clipping support\n\n\t\t} );\n\n\t\tthis.isLineMaterial = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget color() {\n\n\t\treturn this.uniforms.diffuse.value;\n\n\t}\n\n\tset color( value ) {\n\n\t\tthis.uniforms.diffuse.value = value;\n\n\t}\n\n\tget worldUnits() {\n\n\t\treturn 'WORLD_UNITS' in this.defines;\n\n\t}\n\n\tset worldUnits( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.WORLD_UNITS = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.WORLD_UNITS;\n\n\t\t}\n\n\t}\n\n\tget linewidth() {\n\n\t\treturn this.uniforms.linewidth.value;\n\n\t}\n\n\tset linewidth( value ) {\n\n\t\tif ( ! this.uniforms.linewidth ) return;\n\t\tthis.uniforms.linewidth.value = value;\n\n\t}\n\n\tget dashed() {\n\n\t\treturn 'USE_DASH' in this.defines;\n\n\t}\n\n\tset dashed( value ) {\n\n\t\tif ( ( value === true ) !== this.dashed ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.USE_DASH = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.USE_DASH;\n\n\t\t}\n\n\t}\n\n\tget dashScale() {\n\n\t\treturn this.uniforms.dashScale.value;\n\n\t}\n\n\tset dashScale( value ) {\n\n\t\tthis.uniforms.dashScale.value = value;\n\n\t}\n\n\tget dashSize() {\n\n\t\treturn this.uniforms.dashSize.value;\n\n\t}\n\n\tset dashSize( value ) {\n\n\t\tthis.uniforms.dashSize.value = value;\n\n\t}\n\n\tget dashOffset() {\n\n\t\treturn this.uniforms.dashOffset.value;\n\n\t}\n\n\tset dashOffset( value ) {\n\n\t\tthis.uniforms.dashOffset.value = value;\n\n\t}\n\n\tget gapSize() {\n\n\t\treturn this.uniforms.gapSize.value;\n\n\t}\n\n\tset gapSize( value ) {\n\n\t\tthis.uniforms.gapSize.value = value;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.uniforms.opacity.value;\n\n\t}\n\n\tset opacity( value ) {\n\n\t\tif ( ! this.uniforms ) return;\n\t\tthis.uniforms.opacity.value = value;\n\n\t}\n\n\tget resolution() {\n\n\t\treturn this.uniforms.resolution.value;\n\n\t}\n\n\tset resolution( value ) {\n\n\t\tthis.uniforms.resolution.value.copy( value );\n\n\t}\n\n\tget alphaToCoverage() {\n\n\t\treturn 'USE_ALPHA_TO_COVERAGE' in this.defines;\n\n\t}\n\n\tset alphaToCoverage( value ) {\n\n\t\tif ( ! this.defines ) return;\n\n\t\tif ( ( value === true ) !== this.alphaToCoverage ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.USE_ALPHA_TO_COVERAGE = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.USE_ALPHA_TO_COVERAGE;\n\n\t\t}\n\n\t}\n\n}\n\nexport { LineMaterial };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1585, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1591, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/lines/LineSegments2.js"],"sourcesContent":["import {\n\tBox3,\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tLine3,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tSphere,\n\tVector3,\n\tVector4\n} from 'three';\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\n\nconst _viewport = new Vector4();\n\nconst _start = new Vector3();\nconst _end = new Vector3();\n\nconst _start4 = new Vector4();\nconst _end4 = new Vector4();\n\nconst _ssOrigin = new Vector4();\nconst _ssOrigin3 = new Vector3();\nconst _mvMatrix = new Matrix4();\nconst _line = new Line3();\nconst _closestPoint = new Vector3();\n\nconst _box = new Box3();\nconst _sphere = new Sphere();\nconst _clipToWorldVector = new Vector4();\n\nlet _ray, _lineWidth;\n\n// Returns the margin required to expand by in world space given the distance from the camera,\n// line width, resolution, and camera projection\nfunction getWorldSpaceHalfWidth( camera, distance, resolution ) {\n\n\t// transform into clip space, adjust the x and y values by the pixel width offset, then\n\t// transform back into world space to get world offset. Note clip space is [-1, 1] so full\n\t// width does not need to be halved.\n\t_clipToWorldVector.set( 0, 0, - distance, 1.0 ).applyMatrix4( camera.projectionMatrix );\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\n\t_clipToWorldVector.x = _lineWidth / resolution.width;\n\t_clipToWorldVector.y = _lineWidth / resolution.height;\n\t_clipToWorldVector.applyMatrix4( camera.projectionMatrixInverse );\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\n\n\treturn Math.abs( Math.max( _clipToWorldVector.x, _clipToWorldVector.y ) );\n\n}\n\nfunction raycastWorldUnits( lineSegments, intersects ) {\n\n\tconst matrixWorld = lineSegments.matrixWorld;\n\tconst geometry = lineSegments.geometry;\n\tconst instanceStart = geometry.attributes.instanceStart;\n\tconst instanceEnd = geometry.attributes.instanceEnd;\n\tconst segmentCount = Math.min( geometry.instanceCount, instanceStart.count );\n\n\tfor ( let i = 0, l = segmentCount; i < l; i ++ ) {\n\n\t\t_line.start.fromBufferAttribute( instanceStart, i );\n\t\t_line.end.fromBufferAttribute( instanceEnd, i );\n\n\t\t_line.applyMatrix4( matrixWorld );\n\n\t\tconst pointOnLine = new Vector3();\n\t\tconst point = new Vector3();\n\n\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\n\t\tconst isInside = point.distanceTo( pointOnLine ) < _lineWidth * 0.5;\n\n\t\tif ( isInside ) {\n\n\t\t\tintersects.push( {\n\t\t\t\tpoint,\n\t\t\t\tpointOnLine,\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\n\t\t\t\tobject: lineSegments,\n\t\t\t\tface: null,\n\t\t\t\tfaceIndex: i,\n\t\t\t\tuv: null,\n\t\t\t\tuv1: null,\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nfunction raycastScreenSpace( lineSegments, camera, intersects ) {\n\n\tconst projectionMatrix = camera.projectionMatrix;\n\tconst material = lineSegments.material;\n\tconst resolution = material.resolution;\n\tconst matrixWorld = lineSegments.matrixWorld;\n\n\tconst geometry = lineSegments.geometry;\n\tconst instanceStart = geometry.attributes.instanceStart;\n\tconst instanceEnd = geometry.attributes.instanceEnd;\n\tconst segmentCount = Math.min( geometry.instanceCount, instanceStart.count );\n\n\tconst near = - camera.near;\n\n\t//\n\n\t// pick a point 1 unit out along the ray to avoid the ray origin\n\t// sitting at the camera origin which will cause \"w\" to be 0 when\n\t// applying the projection matrix.\n\t_ray.at( 1, _ssOrigin );\n\n\t// ndc space [ - 1.0, 1.0 ]\n\t_ssOrigin.w = 1;\n\t_ssOrigin.applyMatrix4( camera.matrixWorldInverse );\n\t_ssOrigin.applyMatrix4( projectionMatrix );\n\t_ssOrigin.multiplyScalar( 1 / _ssOrigin.w );\n\n\t// screen space\n\t_ssOrigin.x *= resolution.x / 2;\n\t_ssOrigin.y *= resolution.y / 2;\n\t_ssOrigin.z = 0;\n\n\t_ssOrigin3.copy( _ssOrigin );\n\n\t_mvMatrix.multiplyMatrices( camera.matrixWorldInverse, matrixWorld );\n\n\tfor ( let i = 0, l = segmentCount; i < l; i ++ ) {\n\n\t\t_start4.fromBufferAttribute( instanceStart, i );\n\t\t_end4.fromBufferAttribute( instanceEnd, i );\n\n\t\t_start4.w = 1;\n\t\t_end4.w = 1;\n\n\t\t// camera space\n\t\t_start4.applyMatrix4( _mvMatrix );\n\t\t_end4.applyMatrix4( _mvMatrix );\n\n\t\t// skip the segment if it's entirely behind the camera\n\t\tconst isBehindCameraNear = _start4.z > near && _end4.z > near;\n\t\tif ( isBehindCameraNear ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\t// trim the segment if it extends behind camera near\n\t\tif ( _start4.z > near ) {\n\n\t\t\tconst deltaDist = _start4.z - _end4.z;\n\t\t\tconst t = ( _start4.z - near ) / deltaDist;\n\t\t\t_start4.lerp( _end4, t );\n\n\t\t} else if ( _end4.z > near ) {\n\n\t\t\tconst deltaDist = _end4.z - _start4.z;\n\t\t\tconst t = ( _end4.z - near ) / deltaDist;\n\t\t\t_end4.lerp( _start4, t );\n\n\t\t}\n\n\t\t// clip space\n\t\t_start4.applyMatrix4( projectionMatrix );\n\t\t_end4.applyMatrix4( projectionMatrix );\n\n\t\t// ndc space [ - 1.0, 1.0 ]\n\t\t_start4.multiplyScalar( 1 / _start4.w );\n\t\t_end4.multiplyScalar( 1 / _end4.w );\n\n\t\t// screen space\n\t\t_start4.x *= resolution.x / 2;\n\t\t_start4.y *= resolution.y / 2;\n\n\t\t_end4.x *= resolution.x / 2;\n\t\t_end4.y *= resolution.y / 2;\n\n\t\t// create 2d segment\n\t\t_line.start.copy( _start4 );\n\t\t_line.start.z = 0;\n\n\t\t_line.end.copy( _end4 );\n\t\t_line.end.z = 0;\n\n\t\t// get closest point on ray to segment\n\t\tconst param = _line.closestPointToPointParameter( _ssOrigin3, true );\n\t\t_line.at( param, _closestPoint );\n\n\t\t// check if the intersection point is within clip space\n\t\tconst zPos = MathUtils.lerp( _start4.z, _end4.z, param );\n\t\tconst isInClipSpace = zPos >= - 1 && zPos <= 1;\n\n\t\tconst isInside = _ssOrigin3.distanceTo( _closestPoint ) < _lineWidth * 0.5;\n\n\t\tif ( isInClipSpace && isInside ) {\n\n\t\t\t_line.start.fromBufferAttribute( instanceStart, i );\n\t\t\t_line.end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t_line.start.applyMatrix4( matrixWorld );\n\t\t\t_line.end.applyMatrix4( matrixWorld );\n\n\t\t\tconst pointOnLine = new Vector3();\n\t\t\tconst point = new Vector3();\n\n\t\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\n\n\t\t\tintersects.push( {\n\t\t\t\tpoint: point,\n\t\t\t\tpointOnLine: pointOnLine,\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\n\t\t\t\tobject: lineSegments,\n\t\t\t\tface: null,\n\t\t\t\tfaceIndex: i,\n\t\t\t\tuv: null,\n\t\t\t\tuv1: null,\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nclass LineSegments2 extends Mesh {\n\n\tconstructor( geometry = new LineSegmentsGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments2 = true;\n\n\t\tthis.type = 'LineSegments2';\n\n\t}\n\n\t// for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst instanceStart = geometry.attributes.instanceStart;\n\t\tconst instanceEnd = geometry.attributes.instanceEnd;\n\t\tconst lineDistances = new Float32Array( 2 * instanceStart.count );\n\n\t\tfor ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {\n\n\t\t\t_start.fromBufferAttribute( instanceStart, i );\n\t\t\t_end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );\n\n\t\t}\n\n\t\tconst instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst worldUnits = this.material.worldUnits;\n\t\tconst camera = raycaster.camera;\n\n\t\tif ( camera === null && ! worldUnits ) {\n\n\t\t\tconsole.error( 'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.' );\n\n\t\t}\n\n\t\tconst threshold = ( raycaster.params.Line2 !== undefined ) ? raycaster.params.Line2.threshold || 0 : 0;\n\n\t\t_ray = raycaster.ray;\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\t_lineWidth = material.linewidth + threshold;\n\n\t\t// check if we intersect the sphere bounds\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( matrixWorld );\n\n\t\t// increase the sphere bounds by the worst case line screen space width\n\t\tlet sphereMargin;\n\t\tif ( worldUnits ) {\n\n\t\t\tsphereMargin = _lineWidth * 0.5;\n\n\t\t} else {\n\n\t\t\tconst distanceToSphere = Math.max( camera.near, _sphere.distanceToPoint( _ray.origin ) );\n\t\t\tsphereMargin = getWorldSpaceHalfWidth( camera, distanceToSphere, material.resolution );\n\n\t\t}\n\n\t\t_sphere.radius += sphereMargin;\n\n\t\tif ( _ray.intersectsSphere( _sphere ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// check if we intersect the box bounds\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\t_box.copy( geometry.boundingBox ).applyMatrix4( matrixWorld );\n\n\t\t// increase the box bounds by the worst case line width\n\t\tlet boxMargin;\n\t\tif ( worldUnits ) {\n\n\t\t\tboxMargin = _lineWidth * 0.5;\n\n\t\t} else {\n\n\t\t\tconst distanceToBox = Math.max( camera.near, _box.distanceToPoint( _ray.origin ) );\n\t\t\tboxMargin = getWorldSpaceHalfWidth( camera, distanceToBox, material.resolution );\n\n\t\t}\n\n\t\t_box.expandByScalar( boxMargin );\n\n\t\tif ( _ray.intersectsBox( _box ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( worldUnits ) {\n\n\t\t\traycastWorldUnits( this, intersects );\n\n\t\t} else {\n\n\t\t\traycastScreenSpace( this, camera, intersects );\n\n\t\t}\n\n\t}\n\n\tonBeforeRender( renderer ) {\n\n\t\tconst uniforms = this.material.uniforms;\n\n\t\tif ( uniforms && uniforms.resolution ) {\n\n\t\t\trenderer.getViewport( _viewport );\n\t\t\tthis.material.uniforms.resolution.value.set( _viewport.z, _viewport.w );\n\n\t\t}\n\n\t}\n\n}\n\nexport { LineSegments2 };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1835, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1841, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/lines/Line2.js"],"sourcesContent":["import { LineSegments2 } from '../lines/LineSegments2.js';\nimport { LineGeometry } from '../lines/LineGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\n\nclass Line2 extends LineSegments2 {\n\n\tconstructor( geometry = new LineGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLine2 = true;\n\n\t\tthis.type = 'Line2';\n\n\t}\n\n}\n\nexport { Line2 };\n"],"names":[],"mappings":";;;AACA;AACA;AAFA;;;;AAIA,MAAM,cAAc,kKAAA,CAAA,gBAAa;IAEhC,YAAa,WAAW,IAAI,iKAAA,CAAA,eAAY,EAAE,EAAE,WAAW,IAAI,iKAAA,CAAA,eAAY,CAAE;QAAE,OAAO,KAAK,MAAM,KAAK;IAAS,EAAG,CAAG;QAEhH,KAAK,CAAE,UAAU;QAEjB,IAAI,CAAC,OAAO,GAAG;QAEf,IAAI,CAAC,IAAI,GAAG;IAEb;AAED","ignoreList":[0]}},
    {"offset": {"line": 1860, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1866, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/geometries/TextGeometry.js"],"sourcesContent":["/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  depth: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tif ( parameters.depth === undefined && parameters.height !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.TextGeometry: .height is now depreciated. Please use .depth instead' ); // @deprecated, r163\n\n\t\t\t}\n\n\t\t\tparameters.depth = parameters.depth !== undefined ?\n\t\t\t\tparameters.depth : parameters.height !== undefined ?\n\t\t\t\t\tparameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;CAeC;;;AAED;;AAIA,MAAM,qBAAqB,+IAAA,CAAA,kBAAe;IAEzC,YAAa,IAAI,EAAE,aAAa,CAAC,CAAC,CAAG;QAEpC,MAAM,OAAO,WAAW,IAAI;QAE5B,IAAK,SAAS,WAAY;YAEzB,KAAK,IAAI,oCAAoC;QAE9C,OAAO;YAEN,MAAM,SAAS,KAAK,cAAc,CAAE,MAAM,WAAW,IAAI;YAEzD,8CAA8C;YAE9C,IAAK,WAAW,KAAK,KAAK,aAAa,WAAW,MAAM,KAAK,WAAY;gBAExE,QAAQ,IAAI,CAAE,8EAA+E,oBAAoB;YAElH;YAEA,WAAW,KAAK,GAAG,WAAW,KAAK,KAAK,YACvC,WAAW,KAAK,GAAG,WAAW,MAAM,KAAK,YACxC,WAAW,MAAM,GAAG;YAEtB,WAAW;YAEX,IAAK,WAAW,cAAc,KAAK,WAAY,WAAW,cAAc,GAAG;YAC3E,IAAK,WAAW,SAAS,KAAK,WAAY,WAAW,SAAS,GAAG;YACjE,IAAK,WAAW,YAAY,KAAK,WAAY,WAAW,YAAY,GAAG;YAEvE,KAAK,CAAE,QAAQ;QAEhB;QAEA,IAAI,CAAC,IAAI,GAAG;IAEb;AAED","ignoreList":[0]}},
    {"offset": {"line": 1908, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1914, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/loaders/FontLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2022, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2028, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/node_modules/three/examples/jsm/renderers/CSS2DRenderer.js"],"sourcesContent":["import {\n\tMatrix4,\n\tObject3D,\n\tVector2,\n\tVector3\n} from 'three';\n\nclass CSS2DObject extends Object3D {\n\n\tconstructor( element = document.createElement( 'div' ) ) {\n\n\t\tsuper();\n\n\t\tthis.isCSS2DObject = true;\n\n\t\tthis.element = element;\n\n\t\tthis.element.style.position = 'absolute';\n\t\tthis.element.style.userSelect = 'none';\n\n\t\tthis.element.setAttribute( 'draggable', false );\n\n\t\tthis.center = new Vector2( 0.5, 0.5 ); // ( 0, 0 ) is the lower left; ( 1, 1 ) is the top right\n\n\t\tthis.addEventListener( 'removed', function () {\n\n\t\t\tthis.traverse( function ( object ) {\n\n\t\t\t\tif (\n\t\t\t\t\tobject.element instanceof object.element.ownerDocument.defaultView.Element &&\n\t\t\t\t\tobject.element.parentNode !== null\n\t\t\t\t) {\n\n\t\t\t\t\tobject.element.remove();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.element = source.element.cloneNode( true );\n\n\t\tthis.center = source.center;\n\n\t\treturn this;\n\n\t}\n\n}\n\n//\n\nconst _vector = new Vector3();\nconst _viewMatrix = new Matrix4();\nconst _viewProjectionMatrix = new Matrix4();\nconst _a = new Vector3();\nconst _b = new Vector3();\n\nclass CSS2DRenderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tconst _this = this;\n\n\t\tlet _width, _height;\n\t\tlet _widthHalf, _heightHalf;\n\n\t\tconst cache = {\n\t\t\tobjects: new WeakMap()\n\t\t};\n\n\t\tconst domElement = parameters.element !== undefined ? parameters.element : document.createElement( 'div' );\n\n\t\tdomElement.style.overflow = 'hidden';\n\n\t\tthis.domElement = domElement;\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\trenderObject( scene, scene, camera );\n\t\t\tzOrder( scene );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\n\t\t};\n\n\t\tfunction hideObject( object ) {\n\n\t\t\tif ( object.isCSS2DObject ) object.element.style.display = 'none';\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\thideObject( object.children[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera ) {\n\n\t\t\tif ( object.visible === false ) {\n\n\t\t\t\thideObject( object );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( object.isCSS2DObject ) {\n\n\t\t\t\t_vector.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t_vector.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tconst visible = ( _vector.z >= - 1 && _vector.z <= 1 ) && ( object.layers.test( camera.layers ) === true );\n\n\t\t\t\tconst element = object.element;\n\t\t\t\telement.style.display = visible === true ? '' : 'none';\n\n\t\t\t\tif ( visible === true ) {\n\n\t\t\t\t\tobject.onBeforeRender( _this, scene, camera );\n\n\t\t\t\t\telement.style.transform = 'translate(' + ( - 100 * object.center.x ) + '%,' + ( - 100 * object.center.y ) + '%)' + 'translate(' + ( _vector.x * _widthHalf + _widthHalf ) + 'px,' + ( - _vector.y * _heightHalf + _heightHalf ) + 'px)';\n\n\t\t\t\t\tif ( element.parentNode !== domElement ) {\n\n\t\t\t\t\t\tdomElement.appendChild( element );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.onAfterRender( _this, scene, camera );\n\n\t\t\t\t}\n\n\t\t\t\tconst objectData = {\n\t\t\t\t\tdistanceToCameraSquared: getDistanceToSquared( camera, object )\n\t\t\t\t};\n\n\t\t\t\tcache.objects.set( object, objectData );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( object.children[ i ], scene, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getDistanceToSquared( object1, object2 ) {\n\n\t\t\t_a.setFromMatrixPosition( object1.matrixWorld );\n\t\t\t_b.setFromMatrixPosition( object2.matrixWorld );\n\n\t\t\treturn _a.distanceToSquared( _b );\n\n\t\t}\n\n\t\tfunction filterAndFlatten( scene ) {\n\n\t\t\tconst result = [];\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isCSS2DObject ) result.push( object );\n\n\t\t\t} );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction zOrder( scene ) {\n\n\t\t\tconst sorted = filterAndFlatten( scene ).sort( function ( a, b ) {\n\n\t\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\t\treturn b.renderOrder - a.renderOrder;\n\n\t\t\t\t}\n\n\t\t\t\tconst distanceA = cache.objects.get( a ).distanceToCameraSquared;\n\t\t\t\tconst distanceB = cache.objects.get( b ).distanceToCameraSquared;\n\n\t\t\t\treturn distanceA - distanceB;\n\n\t\t\t} );\n\n\t\t\tconst zMax = sorted.length;\n\n\t\t\tfor ( let i = 0, l = sorted.length; i < l; i ++ ) {\n\n\t\t\t\tsorted[ i ].element.style.zIndex = zMax - i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { CSS2DObject, CSS2DRenderer };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}