{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/priya/OneDrive/Desktop/Desktop/MS/MS/Personal/NCSU/Projects/PriyaPortfolio/portfolio/priya-portfolio/components/ui/Globe.tsx"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Color, Scene, Fog, PerspectiveCamera, Vector3 } from \"three\";\r\nimport ThreeGlobe from \"three-globe\";\r\nimport { useThree, Object3DNode, Canvas, extend } from \"@react-three/fiber\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport countries from \"@/data/globe.json\";\r\ndeclare module \"@react-three/fiber\" {\r\n    interface ThreeElements {\r\n        threeGlobe: Object3DNode<ThreeGlobe, typeof ThreeGlobe>;\r\n    }\r\n}\r\n\r\nextend({ ThreeGlobe });\r\n\r\nconst RING_PROPAGATION_SPEED = 3;\r\nconst aspect = 1.2;\r\nconst cameraZ = 300;\r\n\r\ntype Position = {\r\n    order: number;\r\n    startLat: number;\r\n    startLng: number;\r\n    endLat: number;\r\n    endLng: number;\r\n    arcAlt: number;\r\n    color: string;\r\n};\r\n\r\nexport type GlobeConfig = {\r\n    pointSize?: number;\r\n    globeColor?: string;\r\n    showAtmosphere?: boolean;\r\n    atmosphereColor?: string;\r\n    atmosphereAltitude?: number;\r\n    emissive?: string;\r\n    emissiveIntensity?: number;\r\n    shininess?: number;\r\n    polygonColor?: string;\r\n    ambientLight?: string;\r\n    directionalLeftLight?: string;\r\n    directionalTopLight?: string;\r\n    pointLight?: string;\r\n    arcTime?: number;\r\n    arcLength?: number;\r\n    rings?: number;\r\n    maxRings?: number;\r\n    initialPosition?: {\r\n        lat: number;\r\n        lng: number;\r\n    };\r\n    autoRotate?: boolean;\r\n    autoRotateSpeed?: number;\r\n};\r\n\r\ninterface WorldProps {\r\n    globeConfig: GlobeConfig;\r\n    data: Position[];\r\n}\r\n\r\nlet numbersOfRings = [0];\r\n\r\nexport function Globe({ globeConfig, data }: WorldProps) {\r\n    const [globeData, setGlobeData] = useState<\r\n        | {\r\n            size: number;\r\n            order: number;\r\n            color: (t: number) => string;\r\n            lat: number;\r\n            lng: number;\r\n        }[]\r\n        | null\r\n    >(null);\r\n\r\n    const globeRef = useRef<ThreeGlobe | null>(null);\r\n\r\n    const defaultProps = {\r\n        pointSize: 1,\r\n        atmosphereColor: \"#ffffff\",\r\n        showAtmosphere: true,\r\n        atmosphereAltitude: 0.1,\r\n        polygonColor: \"rgba(255,255,255,0.7)\",\r\n        globeColor: \"#1d072e\",\r\n        emissive: \"#000000\",\r\n        emissiveIntensity: 0.1,\r\n        shininess: 0.9,\r\n        arcTime: 2000,\r\n        arcLength: 0.9,\r\n        rings: 1,\r\n        maxRings: 3,\r\n        ...globeConfig,\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (globeRef.current) {\r\n            _buildData();\r\n            _buildMaterial();\r\n        }\r\n    }, [globeRef.current]);\r\n\r\n    const _buildMaterial = () => {\r\n        if (!globeRef.current) return;\r\n\r\n        const globeMaterial = globeRef.current.globeMaterial() as unknown as {\r\n            color: Color;\r\n            emissive: Color;\r\n            emissiveIntensity: number;\r\n            shininess: number;\r\n        };\r\n        globeMaterial.color = new Color(globeConfig.globeColor);\r\n        globeMaterial.emissive = new Color(globeConfig.emissive);\r\n        globeMaterial.emissiveIntensity = globeConfig.emissiveIntensity || 0.1;\r\n        globeMaterial.shininess = globeConfig.shininess || 0.9;\r\n    };\r\n\r\n    const _buildData = () => {\r\n        const arcs = data;\r\n        let points = [];\r\n        for (let i = 0; i < arcs.length; i++) {\r\n            const arc = arcs[i];\r\n            const rgb = hexToRgb(arc.color) as { r: number; g: number; b: number };\r\n            points.push({\r\n                size: defaultProps.pointSize,\r\n                order: arc.order,\r\n                color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\r\n                lat: arc.startLat,\r\n                lng: arc.startLng,\r\n            });\r\n            points.push({\r\n                size: defaultProps.pointSize,\r\n                order: arc.order,\r\n                color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\r\n                lat: arc.endLat,\r\n                lng: arc.endLng,\r\n            });\r\n        }\r\n\r\n        // remove duplicates for same lat and lng\r\n        const filteredPoints = points.filter(\r\n            (v, i, a) =>\r\n                a.findIndex((v2) =>\r\n                    [\"lat\", \"lng\"].every(\r\n                        (k) => v2[k as \"lat\" | \"lng\"] === v[k as \"lat\" | \"lng\"]\r\n                    )\r\n                ) === i\r\n        );\r\n\r\n        setGlobeData(filteredPoints);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (globeRef.current && globeData) {\r\n            globeRef.current\r\n                .hexPolygonsData(countries.features)\r\n                .hexPolygonResolution(3)\r\n                .hexPolygonMargin(0.7)\r\n                .showAtmosphere(defaultProps.showAtmosphere)\r\n                .atmosphereColor(defaultProps.atmosphereColor)\r\n                .atmosphereAltitude(defaultProps.atmosphereAltitude)\r\n                .hexPolygonColor((e) => {\r\n                    return defaultProps.polygonColor;\r\n                });\r\n            startAnimation();\r\n        }\r\n    }, [globeData]);\r\n\r\n    const startAnimation = () => {\r\n        if (!globeRef.current || !globeData) return;\r\n\r\n        globeRef.current\r\n            .arcsData(data)\r\n            .arcStartLat((d) => (d as { startLat: number }).startLat * 1)\r\n            .arcStartLng((d) => (d as { startLng: number }).startLng * 1)\r\n            .arcEndLat((d) => (d as { endLat: number }).endLat * 1)\r\n            .arcEndLng((d) => (d as { endLng: number }).endLng * 1)\r\n            .arcColor((e: any) => (e as { color: string }).color)\r\n            .arcAltitude((e) => {\r\n                return (e as { arcAlt: number }).arcAlt * 1;\r\n            })\r\n            .arcStroke((e) => {\r\n                return [0.32, 0.28, 0.3][Math.round(Math.random() * 2)];\r\n            })\r\n            .arcDashLength(defaultProps.arcLength)\r\n            .arcDashInitialGap((e) => (e as { order: number }).order * 1)\r\n            .arcDashGap(15)\r\n            .arcDashAnimateTime((e) => defaultProps.arcTime);\r\n\r\n        globeRef.current\r\n            .pointsData(data)\r\n            .pointColor((e) => (e as { color: string }).color)\r\n            .pointsMerge(true)\r\n            .pointAltitude(0.0)\r\n            .pointRadius(2);\r\n\r\n        globeRef.current\r\n            .ringsData([])\r\n            .ringColor((e: any) => (t: any) => e.color(t))\r\n            .ringMaxRadius(defaultProps.maxRings)\r\n            .ringPropagationSpeed(RING_PROPAGATION_SPEED)\r\n            .ringRepeatPeriod(\r\n                (defaultProps.arcTime * defaultProps.arcLength) / defaultProps.rings\r\n            );\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!globeRef.current || !globeData) return;\r\n\r\n        const interval = setInterval(() => {\r\n            if (!globeRef.current || !globeData) return;\r\n            numbersOfRings = genRandomNumbers(\r\n                0,\r\n                data.length,\r\n                Math.floor((data.length * 4) / 5)\r\n            );\r\n\r\n            globeRef.current.ringsData(\r\n                globeData.filter((d, i) => numbersOfRings.includes(i))\r\n            );\r\n        }, 2000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [globeRef.current, globeData]);\r\n\r\n    return (\r\n        <>\r\n            <threeGlobe ref={globeRef} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport function WebGLRendererConfig() {\r\n    const { gl, size } = useThree();\r\n\r\n    useEffect(() => {\r\n        gl.setPixelRatio(window.devicePixelRatio);\r\n        gl.setSize(size.width, size.height);\r\n        gl.setClearColor(0xffaaff, 0);\r\n    }, []);\r\n\r\n    return null;\r\n}\r\n\r\nexport function World(props: WorldProps) {\r\n    const { globeConfig } = props;\r\n    const scene = new Scene();\r\n    scene.fog = new Fog(0xffffff, 400, 2000);\r\n    return (\r\n        <Canvas scene={scene} camera={new PerspectiveCamera(50, aspect, 180, 1800)}>\r\n            <WebGLRendererConfig />\r\n            <ambientLight color={globeConfig.ambientLight} intensity={0.6} />\r\n            <directionalLight\r\n                color={globeConfig.directionalLeftLight}\r\n                position={new Vector3(-400, 100, 400)}\r\n            />\r\n            <directionalLight\r\n                color={globeConfig.directionalTopLight}\r\n                position={new Vector3(-200, 500, 200)}\r\n            />\r\n            <pointLight\r\n                color={globeConfig.pointLight}\r\n                position={new Vector3(-200, 500, 200)}\r\n                intensity={0.8}\r\n            />\r\n            <Globe {...props} />\r\n            <OrbitControls\r\n                enablePan={false}\r\n                enableZoom={false}\r\n                minDistance={cameraZ}\r\n                maxDistance={cameraZ}\r\n                autoRotateSpeed={1}\r\n                autoRotate={true}\r\n                minPolarAngle={Math.PI / 3.5}\r\n                maxPolarAngle={Math.PI - Math.PI / 3}\r\n            />\r\n        </Canvas>\r\n    );\r\n}\r\n\r\nexport function hexToRgb(hex: string) {\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n        ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16),\r\n        }\r\n        : null;\r\n}\r\n\r\nexport function genRandomNumbers(min: number, max: number, count: number) {\r\n    const arr = [];\r\n    while (arr.length < count) {\r\n        const r = Math.floor(Math.random() * (max - min)) + min;\r\n        if (arr.indexOf(r) === -1) arr.push(r);\r\n    }\r\n\r\n    return arr;\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}