(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_3be1a5._.js", {

"[project]/node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>GeoJsonGeometry)
});
(()=>{
    const e = new Error("Cannot find module 'earcut'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
(()=>{
    const e = new Error("Cannot find module 'd3-geo'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/three/build/three.core.js [app-client] (ecmascript)");
;
;
;
function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];
    return n;
}
function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
}
function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
}
function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _createClass(e, r, t) {
    return Object.defineProperty(e, "prototype", {
        writable: !1
    }), e;
}
function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
        if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
            t && (r = t);
            var n = 0, F = function() {};
            return {
                s: F,
                n: function() {
                    return n >= r.length ? {
                        done: !0
                    } : {
                        done: !1,
                        value: r[n++]
                    };
                },
                e: function(r) {
                    throw r;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o, a = !0, u = !1;
    return {
        s: function() {
            t = t.call(r);
        },
        n: function() {
            var r = t.next();
            return a = r.done, r;
        },
        e: function(r) {
            u = !0, o = r;
        },
        f: function() {
            try {
                a || null == t.return || t.return();
            } finally{
                if (u) throw o;
            }
        }
    };
}
function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
        return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
}
function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
        constructor: {
            value: t,
            writable: !0,
            configurable: !0
        }
    }), Object.defineProperty(t, "prototype", {
        writable: !1
    }), e && _setPrototypeOf(t, e);
}
function _isNativeReflectConstruct() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function() {
        return !!t;
    })();
}
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) {
                if (Object(t) !== t) return;
                f = !1;
            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
            o = !0, n = r;
        } finally{
            try {
                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
}
function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
        return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
}
function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _unsupportedIterableToArray(r, a) {
    if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = ({}).toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
}
var interpolateLine = function interpolateLine() {
    var lineCoords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var maxDegDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var result = [];
    var prevPnt = null;
    lineCoords.forEach(function(pnt) {
        if (prevPnt) {
            var dist = geoDistance(pnt, prevPnt) * 180 / Math.PI;
            if (dist > maxDegDistance) {
                var interpol = geoInterpolate(prevPnt, pnt);
                var tStep = 1 / Math.ceil(dist / maxDegDistance);
                var t = tStep;
                while(t < 1){
                    result.push(interpol(t));
                    t += tStep;
                }
            }
        }
        result.push(prevPnt = pnt);
    });
    return result;
};
var THREE = typeof window !== 'undefined' && window.THREE ? window.THREE // Prefer consumption from global THREE, if exists
 : {
    BufferGeometry: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BufferGeometry"],
    Float32BufferAttribute: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Float32BufferAttribute"]
};
// support both modes for backwards threejs compatibility
var setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';
var GeoJsonGeometry = /*#__PURE__*/ function(_THREE$BufferGeometry) {
    function GeoJsonGeometry(geoJson) {
        var _this;
        var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;
        _classCallCheck(this, GeoJsonGeometry);
        _this = _callSuper(this, GeoJsonGeometry);
        _this.type = 'GeoJsonGeometry';
        _this.parameters = {
            geoJson: geoJson,
            radius: radius,
            resolution: resolution
        };
        // process various geometry types
        var groups = (({
            Point: genPoint,
            MultiPoint: genMultiPoint,
            LineString: genLineString,
            MultiLineString: genMultiLineString,
            Polygon: genPolygon,
            MultiPolygon: genMultiPolygon
        })[geoJson.type] || function() {
            return [];
        })(geoJson.coordinates, radius);
        // concat groups
        var indices = [], vertices = [];
        var groupCnt = 0;
        groups.forEach(function(newG) {
            var prevIndCnt = indices.length;
            concatGroup({
                indices: indices,
                vertices: vertices
            }, newG);
            _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
        });
        // build geometry
        indices.length && _this.setIndex(indices);
        vertices.length && _this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3));
        //
        function genPoint(coords, r) {
            var vertices = polar2Cartesian(coords[1], coords[0], r);
            var indices = [];
            return [
                {
                    vertices: vertices,
                    indices: indices
                }
            ];
        }
        function genMultiPoint(coords, r) {
            var result = {
                vertices: [],
                indices: []
            };
            coords.map(function(c) {
                return genPoint(c, r);
            }).forEach(function(_ref) {
                var _ref2 = _slicedToArray(_ref, 1), newPnt = _ref2[0];
                concatGroup(result, newPnt);
            });
            return [
                result
            ];
        }
        function genLineString(coords, r) {
            var coords3d = interpolateLine(coords, resolution).map(function(_ref3) {
                var _ref4 = _slicedToArray(_ref3, 2), lng = _ref4[0], lat = _ref4[1];
                return polar2Cartesian(lat, lng, r);
            });
            var _earcutFlatten = flatten([
                coords3d
            ]), vertices = _earcutFlatten.vertices;
            var numPoints = Math.round(vertices.length / 3);
            var indices = [];
            for(var vIdx = 1; vIdx < numPoints; vIdx++){
                indices.push(vIdx - 1, vIdx);
            }
            return [
                {
                    vertices: vertices,
                    indices: indices
                }
            ];
        }
        function genMultiLineString(coords, r) {
            var result = {
                vertices: [],
                indices: []
            };
            coords.map(function(c) {
                return genLineString(c, r);
            }).forEach(function(_ref5) {
                var _ref6 = _slicedToArray(_ref5, 1), newLine = _ref6[0];
                concatGroup(result, newLine);
            });
            return [
                result
            ];
        }
        function genPolygon(coords, r) {
            var coords3d = coords.map(function(coordsSegment) {
                return interpolateLine(coordsSegment, resolution).map(function(_ref7) {
                    var _ref8 = _slicedToArray(_ref7, 2), lng = _ref8[0], lat = _ref8[1];
                    return polar2Cartesian(lat, lng, r);
                });
            });
            // Each point generates 3 vertice items (x,y,z).
            var _earcutFlatten2 = flatten(coords3d), vertices = _earcutFlatten2.vertices, holes = _earcutFlatten2.holes;
            var firstHoleIdx = holes[0] || Infinity;
            var outerVertices = vertices.slice(0, firstHoleIdx * 3);
            var holeVertices = vertices.slice(firstHoleIdx * 3);
            var holesIdx = new Set(holes);
            var numPoints = Math.round(vertices.length / 3);
            var outerIndices = [], holeIndices = [];
            for(var vIdx = 1; vIdx < numPoints; vIdx++){
                if (!holesIdx.has(vIdx)) {
                    if (vIdx < firstHoleIdx) {
                        outerIndices.push(vIdx - 1, vIdx);
                    } else {
                        holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);
                    }
                }
            }
            var groups = [
                {
                    indices: outerIndices,
                    vertices: outerVertices
                }
            ];
            if (holes.length) {
                groups.push({
                    indices: holeIndices,
                    vertices: holeVertices
                });
            }
            return groups;
        }
        function genMultiPolygon(coords, r) {
            var outer = {
                vertices: [],
                indices: []
            };
            var holes = {
                vertices: [],
                indices: []
            };
            coords.map(function(c) {
                return genPolygon(c, r);
            }).forEach(function(_ref9) {
                var _ref10 = _slicedToArray(_ref9, 2), newOuter = _ref10[0], newHoles = _ref10[1];
                concatGroup(outer, newOuter);
                newHoles && concatGroup(holes, newHoles);
            });
            var groups = [
                outer
            ];
            holes.vertices.length && groups.push(holes);
            return groups;
        }
        return _this;
    }
    _inherits(GeoJsonGeometry, _THREE$BufferGeometry);
    return _createClass(GeoJsonGeometry);
}(THREE.BufferGeometry); //
function concatGroup(main, extra) {
    var prevVertCnt = Math.round(main.vertices.length / 3);
    concatArr(main.vertices, extra.vertices);
    concatArr(main.indices, extra.indices.map(function(ind) {
        return ind + prevVertCnt;
    }));
}
function concatArr(target, src) {
    var _iterator = _createForOfIteratorHelper(src), _step;
    try {
        for(_iterator.s(); !(_step = _iterator.n()).done;){
            var e = _step.value;
            target.push(e);
        }
    } catch (err) {
        _iterator.e(err);
    } finally{
        _iterator.f();
    }
}
function polar2Cartesian(lat, lng) {
    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var phi = (90 - lat) * Math.PI / 180;
    var theta = (90 - lng) * Math.PI / 180;
    return [
        r * Math.sin(phi) * Math.cos(theta),
        // x
        r * Math.cos(phi),
        // y
        r * Math.sin(phi) * Math.sin(theta) // z
    ];
}
;
}}),
"[project]/node_modules/tinycolor2/esm/tinycolor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// This file is autogenerated. It's used to publish ESM to npm.
__turbopack_esm__({
    "default": (()=>tinycolor)
});
function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
}
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License
var trimLeft = /^\s+/;
var trimRight = /\s+$/;
function tinycolor(color, opts) {
    color = color ? color : "";
    opts = opts || {};
    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
        return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;
    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) this._r = Math.round(this._r);
    if (this._g < 1) this._g = Math.round(this._g);
    if (this._b < 1) this._b = Math.round(this._b);
    this._ok = rgb.ok;
}
tinycolor.prototype = {
    isDark: function isDark() {
        return this.getBrightness() < 128;
    },
    isLight: function isLight() {
        return !this.isDark();
    },
    isValid: function isValid() {
        return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
        return this._originalInput;
    },
    getFormat: function getFormat() {
        return this._format;
    },
    getAlpha: function getAlpha() {
        return this._a;
    },
    getBrightness: function getBrightness() {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function getLuminance() {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r / 255;
        GsRGB = rgb.g / 255;
        BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) R = RsRGB / 12.92;
        else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        if (GsRGB <= 0.03928) G = GsRGB / 12.92;
        else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        if (BsRGB <= 0.03928) B = BsRGB / 12.92;
        else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function setAlpha(value) {
        this._a = boundAlpha(value);
        this._roundA = Math.round(100 * this._a) / 100;
        return this;
    },
    toHsv: function toHsv() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return {
            h: hsv.h * 360,
            s: hsv.s,
            v: hsv.v,
            a: this._a
        };
    },
    toHsvString: function toHsvString() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v = Math.round(hsv.v * 100);
        return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function toHsl() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return {
            h: hsl.h * 360,
            s: hsl.s,
            l: hsl.l,
            a: this._a
        };
    },
    toHslString: function toHslString() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = Math.round(hsl.h * 360), s = Math.round(hsl.s * 100), l = Math.round(hsl.l * 100);
        return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function toHex(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
        return "#" + this.toHex(allow3Char);
    },
    toHex8: function toHex8(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function toHex8String(allow4Char) {
        return "#" + this.toHex8(allow4Char);
    },
    toRgb: function toRgb() {
        return {
            r: Math.round(this._r),
            g: Math.round(this._g),
            b: Math.round(this._b),
            a: this._a
        };
    },
    toRgbString: function toRgbString() {
        return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function toPercentageRgb() {
        return {
            r: Math.round(bound01(this._r, 255) * 100) + "%",
            g: Math.round(bound01(this._g, 255) * 100) + "%",
            b: Math.round(bound01(this._b, 255) * 100) + "%",
            a: this._a
        };
    },
    toPercentageRgbString: function toPercentageRgbString() {
        return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function toName() {
        if (this._a === 0) {
            return "transparent";
        }
        if (this._a < 1) {
            return false;
        }
        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
        var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";
        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }
        return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function toString(format) {
        var formatSet = !!format;
        format = format || this._format;
        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
            formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }
        return formattedString || this.toHexString();
    },
    clone: function clone() {
        return tinycolor(this.toString());
    },
    _applyModification: function _applyModification(fn, args) {
        var color = fn.apply(null, [
            this
        ].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
    },
    lighten: function lighten() {
        return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
        return this._applyModification(_brighten, arguments);
    },
    darken: function darken() {
        return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
        return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
        return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
        return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
        return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn, args) {
        return fn.apply(null, [
            this
        ].concat([].slice.call(args)));
    },
    analogous: function analogous() {
        return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
        return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
        return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
        return this._applyCombination(_splitcomplement, arguments);
    },
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: function triad() {
        return this._applyCombination(polyad, [
            3
        ]);
    },
    tetrad: function tetrad() {
        return this._applyCombination(polyad, [
            4
        ]);
    }
};
// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (_typeof(color) == "object") {
        var newColor = {};
        for(var i in color){
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                } else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }
    return tinycolor(color, opts);
};
// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {
    var rgb = {
        r: 0,
        g: 0,
        b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
        color = stringInputToObject(color);
    }
    if (_typeof(color) == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
        }
        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }
    a = boundAlpha(a);
    return {
        ok: ok,
        format: color.format || format,
        r: Math.min(255, Math.max(rgb.r, 0)),
        g: Math.min(255, Math.max(rgb.g, 0)),
        b: Math.min(255, Math.max(rgb.b, 0)),
        a: a
    };
}
// Conversion Functions
// --------------------
// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b) {
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}
// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;
    if (max == min) {
        h = s = 0; // achromatic
    } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max){
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        l: l
    };
}
// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
    }
    if (s === 0) {
        r = g = b = l; // achromatic
    } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255
    };
}
// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
        h = 0; // achromatic
    } else {
        switch(max){
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        v: v
    };
}
// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [
        v,
        q,
        p,
        p,
        t,
        v
    ][mod], g = [
        t,
        v,
        v,
        q,
        p,
        p
    ][mod], b = [
        p,
        p,
        t,
        v,
        v,
        q
    ][mod];
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255
    };
}
// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {
    var hex = [
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g).toString(16)),
        pad2(Math.round(b).toString(16))
    ];
    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
}
// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g).toString(16)),
        pad2(Math.round(b).toString(16)),
        pad2(convertDecimalToHex(a))
    ];
    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
}
// `rgbaToArgbHex`
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {
    var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(Math.round(r).toString(16)),
        pad2(Math.round(g).toString(16)),
        pad2(Math.round(b).toString(16))
    ];
    return hex.join("");
}
// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function(color1, color2) {
    if (!color1 || !color2) return false;
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};
tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: Math.random(),
        g: Math.random(),
        b: Math.random()
    });
};
// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}
function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}
function _greyscale(color) {
    return tinycolor(color).desaturate(100);
}
function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}
function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
}
function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}
// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
}
// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
}
function polyad(color, number) {
    if (isNaN(number) || number <= 0) {
        throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color).toHsl();
    var result = [
        tinycolor(color)
    ];
    var step = 360 / number;
    for(var i = 1; i < number; i++){
        result.push(tinycolor({
            h: (hsl.h + i * step) % 360,
            s: hsl.s,
            l: hsl.l
        }));
    }
    return result;
}
function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({
            h: (h + 72) % 360,
            s: hsl.s,
            l: hsl.l
        }),
        tinycolor({
            h: (h + 216) % 360,
            s: hsl.s,
            l: hsl.l
        })
    ];
}
function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [
        tinycolor(color)
    ];
    for(hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;){
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
}
function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while(results--){
        ret.push(tinycolor({
            h: h,
            s: s,
            v: v
        }));
        v = (v + modification) % 1;
    }
    return ret;
}
// Utility Functions
// ---------------------
tinycolor.mix = function(color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
};
// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
// `contrast`
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
};
// `isReadable`
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch(wcag2Parms.level + wcag2Parms.size){
        case "AAsmall":
        case "AAAlarge":
            out = readability >= 4.5;
            break;
        case "AAlarge":
            out = readability >= 3;
            break;
        case "AAAsmall":
            out = readability >= 7;
            break;
    }
    return out;
};
// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for(var i = 0; i < colorList.length; i++){
        readability = tinycolor.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
        }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
        level: level,
        size: size
    }) || !includeFallbackColors) {
        return bestColor;
    } else {
        args.includeFallbackColors = false;
        return tinycolor.mostReadable(baseColor, [
            "#fff",
            "#000"
        ], args);
    }
};
// Big List of Colors
// ------------------
// <https://www.w3.org/TR/css-color-4/#named-colors>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};
// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);
// Utilities
// ---------
// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
    var flipped = {};
    for(var i in o){
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}
// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }
    return a;
}
// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));
    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }
    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
        return 1;
    }
    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
}
// Force a number between 0 and 1
function clamp01(val) {
    return Math.min(1, Math.max(0, val));
}
// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}
// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
}
// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
}
// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
}
// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = n * 100 + "%";
    }
    return n;
}
// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
}
var matchers = function() {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";
    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
}();
// `isValidCSSUnit`
// Take in a single string / number and check to see if it looks like a CSS unit
// (see `matchers` above for definition).
function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
}
// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {
    color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    } else if (color == "transparent") {
        return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
        };
    }
    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if (match = matchers.rgb.exec(color)) {
        return {
            r: match[1],
            g: match[2],
            b: match[3]
        };
    }
    if (match = matchers.rgba.exec(color)) {
        return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
        };
    }
    if (match = matchers.hsl.exec(color)) {
        return {
            h: match[1],
            s: match[2],
            l: match[3]
        };
    }
    if (match = matchers.hsla.exec(color)) {
        return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
        };
    }
    if (match = matchers.hsv.exec(color)) {
        return {
            h: match[1],
            s: match[2],
            v: match[3]
        };
    }
    if (match = matchers.hsva.exec(color)) {
        return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
        };
    }
    if (match = matchers.hex8.exec(color)) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if (match = matchers.hex6.exec(color)) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if (match = matchers.hex4.exec(color)) {
        return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            a: convertHexToDecimal(match[4] + "" + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if (match = matchers.hex3.exec(color)) {
        return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            format: named ? "name" : "hex"
        };
    }
    return false;
}
function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {
        level: "AA",
        size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
        level = "AA";
    }
    if (size !== "small" && size !== "large") {
        size = "small";
    }
    return {
        level: level,
        size: size
    };
}
;
}}),
"[project]/node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>ConicPolygonGeometry)
});
(()=>{
    const e = new Error("Cannot find module 'd3-array'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
(()=>{
    const e = new Error("Cannot find module 'earcut'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
(()=>{
    const e = new Error("Cannot find module 'delaunator'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
(()=>{
    const e = new Error("Cannot find module '@turf/boolean-point-in-polygon'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
(()=>{
    const e = new Error("Cannot find module 'd3-geo'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
(()=>{
    const e = new Error("Cannot find module 'd3-geo-voronoi'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
(()=>{
    const e = new Error("Cannot find module 'd3-scale'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/three/build/three.core.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];
    return n;
}
function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
}
function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _createClass(e, r, t) {
    return Object.defineProperty(e, "prototype", {
        writable: !1
    }), e;
}
function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
        return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
}
function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
        constructor: {
            value: t,
            writable: !0,
            configurable: !0
        }
    }), Object.defineProperty(t, "prototype", {
        writable: !1
    }), e && _setPrototypeOf(t, e);
}
function _isNativeReflectConstruct() {
    try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function() {
        return !!t;
    })();
}
function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) ;
            else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
            o = !0, n = r;
        } finally{
            try {
                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
}
function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
        return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
}
function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _unsupportedIterableToArray(r, a) {
    if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = ({}).toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
}
function geoPolygonTriangulate(polygon) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$resolution = _ref.resolution, resolution = _ref$resolution === void 0 ? Infinity : _ref$resolution;
    var contour = interpolateContourPoints(polygon, resolution);
    var edgePoints = merge(contour);
    var innerPoints = getInnerGeoPoints(polygon, resolution);
    var points = [].concat(_toConsumableArray(edgePoints), _toConsumableArray(innerPoints));
    var boundariesGeojson = {
        type: 'Polygon',
        coordinates: polygon
    };
    var _geoBounds = geoBounds(boundariesGeojson), _geoBounds2 = _slicedToArray(_geoBounds, 2), _geoBounds2$ = _slicedToArray(_geoBounds2[0], 2), minLng = _geoBounds2$[0], minLat = _geoBounds2$[1], _geoBounds2$2 = _slicedToArray(_geoBounds2[1], 2), maxLng = _geoBounds2$2[0], maxLat = _geoBounds2$2[1];
    var crossesPoleOrAntimeridian = minLng > maxLng // crosses antimeridian
     || maxLat >= 89 // crosses north pole
     || minLat <= -89; // crosses south pole
    var indices = [];
    if (crossesPoleOrAntimeridian) {
        // Use d3-geo-voronoi. Slowest, but most accurate for polygons that cross poles or anti-meridian
        var vt = geoVoronoi(points).triangles(); // geoDelaunay generates more triangles than needed
        var pntMap = new Map(points.map(function(_ref2, idx) {
            var _ref3 = _slicedToArray(_ref2, 2), lng = _ref3[0], lat = _ref3[1];
            return [
                "".concat(lng, "-").concat(lat),
                idx
            ];
        }));
        vt.features.forEach(function(f) {
            var _indices;
            var triangle = f.geometry.coordinates[0].slice(0, 3).reverse(); // reverse wound to match earcut
            var inds = [];
            triangle.forEach(function(_ref4) {
                var _ref5 = _slicedToArray(_ref4, 2), lng = _ref5[0], lat = _ref5[1];
                var k = "".concat(lng, "-").concat(lat);
                pntMap.has(k) && inds.push(pntMap.get(k));
            });
            if (inds.length !== 3) return; // triangle malfunction
            // exclude edge triangles outside polygon perimeter or through holes
            if (inds.some(function(ind) {
                return ind < edgePoints.length;
            })) {
                var triangleCentroid = f.properties.circumcenter;
                if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return;
            }
            (_indices = indices).push.apply(_indices, inds);
        });
    } else if (!innerPoints.length) {
        // earcut triangulation slightly more performing if it's only using the polygon perimeter
        var _earcutFlatten = flatten(contour), vertices = _earcutFlatten.vertices, _earcutFlatten$holes = _earcutFlatten.holes, holes = _earcutFlatten$holes === void 0 ? [] : _earcutFlatten$holes;
        indices = earcut(vertices, holes, 2);
    } else {
        // use delaunator
        var delaunay = Delaunator.from(points);
        var _loop = function _loop(i) {
            var _indices2;
            var inds = [
                2,
                1,
                0
            ].map(function(idx) {
                return delaunay.triangles[i + idx];
            }); // reverse wound to have same orientation as earcut
            var triangle = inds.map(function(indice) {
                return points[indice];
            });
            // exclude edge triangles outside polygon perimeter or through holes
            if (inds.some(function(ind) {
                return ind < edgePoints.length;
            })) {
                var triangleCentroid = [
                    0,
                    1
                ].map(function(coordIdx) {
                    return mean(triangle, function(p) {
                        return p[coordIdx];
                    });
                });
                if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return 1; // continue
            }
            (_indices2 = indices).push.apply(_indices2, _toConsumableArray(inds));
        };
        for(var i = 0, len = delaunay.triangles.length; i < len; i += 3){
            if (_loop(i)) continue;
        }
    }
    // calc uvs
    var lngUvScale = scaleLinear(extent(points, function(d) {
        return d[0];
    }), [
        0,
        1
    ]);
    var latUvScale = scaleLinear(extent(points, function(d) {
        return d[1];
    }), [
        0,
        1
    ]);
    var uvs = points.map(function(_ref6) {
        var _ref7 = _slicedToArray(_ref6, 2), lng = _ref7[0], lat = _ref7[1];
        return [
            lngUvScale(lng),
            latUvScale(lat)
        ];
    });
    var triangles = {
        points: points,
        indices: indices,
        uvs: uvs
    };
    return {
        contour: contour,
        triangles: triangles
    };
}
function interpolateContourPoints(polygon, maxDistance) {
    // add interpolated points for segments that are further apart than the max distance
    return polygon.map(function(coords) {
        var pnts = [];
        var prevPnt;
        coords.forEach(function(pnt) {
            if (prevPnt) {
                var dist = geoDistance(pnt, prevPnt) * 180 / Math.PI;
                if (dist > maxDistance) {
                    var interpol = geoInterpolate(prevPnt, pnt);
                    var tStep = 1 / Math.ceil(dist / maxDistance);
                    var t = tStep;
                    while(t < 1){
                        pnts.push(interpol(t));
                        t += tStep;
                    }
                }
            }
            pnts.push(prevPnt = pnt);
        });
        return pnts;
    });
}
function getInnerGeoPoints(polygon, maxDistance) {
    var boundariesGeojson = {
        type: 'Polygon',
        coordinates: polygon
    };
    var _geoBounds3 = geoBounds(boundariesGeojson), _geoBounds4 = _slicedToArray(_geoBounds3, 2), _geoBounds4$ = _slicedToArray(_geoBounds4[0], 2), minLng = _geoBounds4$[0], minLat = _geoBounds4$[1], _geoBounds4$2 = _slicedToArray(_geoBounds4[1], 2), maxLng = _geoBounds4$2[0], maxLat = _geoBounds4$2[1];
    // polygon smaller than maxDistance -> no inner points
    if (Math.min(Math.abs(maxLng - minLng), Math.abs(maxLat - minLat)) < maxDistance) return [];
    var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
    return getGeoSpiralGrid(maxDistance, {
        minLng: minLng,
        maxLng: maxLng,
        minLat: minLat,
        maxLat: maxLat
    }).filter(function(pnt) {
        return pointInside(pnt, boundariesGeojson, crossesPoleOrAntimeridian);
    });
}
function getGeoSpiralGrid(distanceBetweenPoints) {
    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, minLng = _ref8.minLng, maxLng = _ref8.maxLng, minLat = _ref8.minLat, maxLat = _ref8.maxLat;
    var numPoints = Math.round(Math.pow(360 / distanceBetweenPoints, 2) / Math.PI);
    // https://observablehq.com/@mbostock/spherical-fibonacci-lattice
    var phi = (1 + Math.sqrt(5)) / 2; // golden ratio
    var getPntLng = function getPntLng(idx) {
        return idx / phi * 360 % 360 - 180;
    };
    var getPntLat = function getPntLat(idx) {
        return Math.acos(2 * idx / numPoints - 1) / Math.PI * 180 - 90;
    };
    var getPntIdx = function getPntIdx(lat) {
        return numPoints * (Math.cos((lat + 90) * Math.PI / 180) + 1) / 2;
    };
    var pntIdxRange = [
        maxLat !== undefined ? Math.ceil(getPntIdx(maxLat)) : 0,
        minLat !== undefined ? Math.floor(getPntIdx(minLat)) : numPoints - 1
    ];
    var isLngInRange = minLng === undefined && maxLng === undefined ? function() {
        return true;
    } : minLng === undefined ? function(lng) {
        return lng <= maxLng;
    } : maxLng === undefined ? function(lng) {
        return lng >= minLng;
    } : maxLng >= minLng ? function(lng) {
        return lng >= minLng && lng <= maxLng;
    } : function(lng) {
        return lng >= minLng || lng <= maxLng;
    }; // for ranges that cross the anti-meridian
    var pnts = [];
    for(var i = pntIdxRange[0]; i <= pntIdxRange[1]; i++){
        var lng = getPntLng(i);
        isLngInRange(lng) && pnts.push([
            lng,
            getPntLat(i)
        ]);
    }
    return pnts;
}
function pointInside(pnt, polygon) {
    var crossesPoleOrAntimeridian = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // turf method is more performing but malfunctions if polygon includes a pole (lat = 90 | -90) or crosses the antimeridian (lng = 180 | -180)
    return crossesPoleOrAntimeridian ? geoContains(polygon, pnt) : turfPointInPolygon(pnt, polygon);
}
var THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists
 : {
    BufferGeometry: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BufferGeometry"],
    Float32BufferAttribute: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Float32BufferAttribute"]
};
// support both modes for backwards threejs compatibility
var setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';
var ConicPolygonGeometry = /*#__PURE__*/ function(_THREE$BufferGeometry) {
    function ConicPolygonGeometry(polygonGeoJson, startHeight, endHeight, closedBottom, closedTop, includeSides, curvatureResolution) {
        var _this;
        _classCallCheck(this, ConicPolygonGeometry);
        _this = _callSuper(this, ConicPolygonGeometry);
        _this.type = 'ConicPolygonGeometry';
        _this.parameters = {
            polygonGeoJson: polygonGeoJson,
            startHeight: startHeight,
            endHeight: endHeight,
            closedBottom: closedBottom,
            closedTop: closedTop,
            includeSides: includeSides,
            curvatureResolution: curvatureResolution
        };
        // defaults
        startHeight = startHeight || 0;
        endHeight = endHeight || 1;
        closedBottom = closedBottom !== undefined ? closedBottom : true;
        closedTop = closedTop !== undefined ? closedTop : true;
        includeSides = includeSides !== undefined ? includeSides : true;
        curvatureResolution = curvatureResolution || 5; // in angular degrees
        // pre-calculate contour, triangulation and UV maps
        var _geoPolygonTriangulat = geoPolygonTriangulate(polygonGeoJson, {
            resolution: curvatureResolution
        }), contour = _geoPolygonTriangulat.contour, triangles = _geoPolygonTriangulat.triangles;
        var flatUvs = merge(triangles.uvs);
        var vertices = [];
        var uvs = [];
        var indices = [];
        var groupCnt = 0; // add groups to apply different materials to torso / caps
        var addGroup = function addGroup(groupData) {
            var prevVertCnt = Math.round(vertices.length / 3);
            var prevIndCnt = indices.length;
            vertices = vertices.concat(groupData.vertices);
            uvs = uvs.concat(groupData.uvs);
            indices = indices.concat(!prevVertCnt ? groupData.indices : groupData.indices.map(function(ind) {
                return ind + prevVertCnt;
            }));
            _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
        };
        includeSides && addGroup(generateTorso());
        closedBottom && addGroup(generateCap(startHeight, false));
        closedTop && addGroup(generateCap(endHeight, true));
        // build geometry
        _this.setIndex(indices);
        _this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3));
        _this[setAttributeFn]('uv', new THREE.Float32BufferAttribute(uvs, 2));
        // auto-calculate normals
        _this.computeVertexNormals();
        //
        function generateVertices(polygon, altitude) {
            var coords3d = polygon.map(function(coords) {
                return coords.map(function(_ref) {
                    var _ref2 = _slicedToArray(_ref, 2), lng = _ref2[0], lat = _ref2[1];
                    return polar2Cartesian(lat, lng, altitude);
                });
            });
            // returns { vertices, holes, coordinates }. Each point generates 3 vertice items (x,y,z).
            return flatten(coords3d);
        }
        function generateTorso() {
            var _generateVertices = generateVertices(contour, startHeight), bottomVerts = _generateVertices.vertices, holes = _generateVertices.holes;
            var _generateVertices2 = generateVertices(contour, endHeight), topVerts = _generateVertices2.vertices;
            var vertices = merge([
                topVerts,
                bottomVerts
            ]);
            var numPoints = Math.round(topVerts.length / 3);
            var holesIdx = new Set(holes);
            var lastHoleIdx = 0;
            var indices = [];
            for(var v0Idx = 0; v0Idx < numPoints; v0Idx++){
                var v1Idx = v0Idx + 1; // next point
                if (v1Idx === numPoints) {
                    v1Idx = lastHoleIdx; // close final loop
                } else if (holesIdx.has(v1Idx)) {
                    var holeIdx = v1Idx;
                    v1Idx = lastHoleIdx; // close hole loop
                    lastHoleIdx = holeIdx;
                }
                // Each pair of coords generates two triangles (faces)
                indices.push(v0Idx, v0Idx + numPoints, v1Idx + numPoints);
                indices.push(v1Idx + numPoints, v1Idx, v0Idx);
            }
            var uvs = []; // wrap texture around perimeter (u), with v=1 on top
            for(var v = 1; v >= 0; v--)for(var i = 0; i < numPoints; i += 1)uvs.push(i / (numPoints - 1), v);
            return {
                indices: indices,
                vertices: vertices,
                uvs: uvs
            };
        }
        function generateCap(radius) {
            var isTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            return {
                // need to reverse-wind the bottom triangles to make them face outwards
                indices: isTop ? triangles.indices : triangles.indices.slice().reverse(),
                vertices: generateVertices([
                    triangles.points
                ], radius).vertices,
                uvs: flatUvs
            };
        }
        return _this;
    }
    _inherits(ConicPolygonGeometry, _THREE$BufferGeometry);
    return _createClass(ConicPolygonGeometry);
}(THREE.BufferGeometry); //
function polar2Cartesian(lat, lng) {
    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var phi = (90 - lat) * Math.PI / 180;
    var theta = (90 - lng) * Math.PI / 180;
    return [
        r * Math.sin(phi) * Math.cos(theta),
        // x
        r * Math.cos(phi),
        // y
        r * Math.sin(phi) * Math.sin(theta) // z
    ];
}
;
}}),
"[project]/node_modules/yaot/lib/bounds3.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = Bounds3;
function Bounds3(x, y, z, half) {
    this.x = typeof x === 'number' ? x : 0;
    this.y = typeof y === 'number' ? y : 0;
    this.z = typeof z === 'number' ? z : 0;
    this.half = typeof half === 'number' ? half : 0;
}
Bounds3.prototype.contains = function contains(x, y, z) {
    var half = this.half;
    return this.x - half <= x && x < this.x + half && this.y - half <= y && y < this.y + half && this.z - half <= z && z < this.z + half;
};
}}),
"[project]/node_modules/yaot/lib/treeNode.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var Bounds3 = __turbopack_require__("[project]/node_modules/yaot/lib/bounds3.js [app-client] (ecmascript)");
var MAX_ITEMS = 4;
module.exports = TreeNode;
function TreeNode(bounds) {
    this.bounds = bounds;
    this.q0 = null;
    this.q1 = null;
    this.q2 = null;
    this.q3 = null;
    this.q4 = null;
    this.q5 = null;
    this.q6 = null;
    this.q7 = null;
    this.items = null;
}
TreeNode.prototype.subdivide = function subdivide() {
    var bounds = this.bounds;
    var quarter = bounds.half / 2;
    this.q0 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z - quarter, quarter));
    this.q1 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z - quarter, quarter));
    this.q2 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z - quarter, quarter));
    this.q3 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z - quarter, quarter));
    this.q4 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z + quarter, quarter));
    this.q5 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z + quarter, quarter));
    this.q6 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z + quarter, quarter));
    this.q7 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z + quarter, quarter));
};
TreeNode.prototype.insert = function insert(idx, array, depth) {
    var isLeaf = this.q0 === null;
    if (isLeaf) {
        // TODO: this memory could be recycled to avoid GC
        if (this.items === null) {
            this.items = [
                idx
            ];
        } else {
            this.items.push(idx);
        }
        if (this.items.length >= MAX_ITEMS && depth < 16) {
            this.subdivide();
            for(var i = 0; i < this.items.length; ++i){
                this.insert(this.items[i], array, depth + 1);
            }
            this.items = null;
        }
    } else {
        var x = array[idx], y = array[idx + 1], z = array[idx + 2];
        var bounds = this.bounds;
        var quadIdx = 0; // assume NW
        if (x > bounds.x) {
            quadIdx += 1; // nope, we are in E part
        }
        if (y > bounds.y) {
            quadIdx += 2; // Somewhere south.
        }
        if (z > bounds.z) {
            quadIdx += 4; // Somewhere far
        }
        var child = getChild(this, quadIdx);
        child.insert(idx, array, depth + 1);
    }
};
TreeNode.prototype.query = function queryBounds(results, sourceArray, intersects, preciseCheck) {
    if (!intersects(this.bounds)) return;
    var items = this.items;
    var needsCheck = typeof preciseCheck === 'function';
    if (items) {
        for(var i = 0; i < items.length; ++i){
            var idx = items[i];
            if (needsCheck) {
                if (preciseCheck(sourceArray[idx], sourceArray[idx + 1], sourceArray[idx + 2])) {
                    results.push(idx);
                }
            } else {
                results.push(idx);
            }
        }
    }
    if (!this.q0) return;
    this.q0.query(results, sourceArray, intersects, preciseCheck);
    this.q1.query(results, sourceArray, intersects, preciseCheck);
    this.q2.query(results, sourceArray, intersects, preciseCheck);
    this.q3.query(results, sourceArray, intersects, preciseCheck);
    this.q4.query(results, sourceArray, intersects, preciseCheck);
    this.q5.query(results, sourceArray, intersects, preciseCheck);
    this.q6.query(results, sourceArray, intersects, preciseCheck);
    this.q7.query(results, sourceArray, intersects, preciseCheck);
};
function getChild(node, idx) {
    if (idx === 0) return node.q0;
    if (idx === 1) return node.q1;
    if (idx === 2) return node.q2;
    if (idx === 3) return node.q3;
    if (idx === 4) return node.q4;
    if (idx === 5) return node.q5;
    if (idx === 6) return node.q6;
    if (idx === 7) return node.q7;
}
}}),
"[project]/node_modules/yaot/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Represents octree data structure
 *
 * https://en.wikipedia.org/wiki/Octree
 */ var Bounds3 = __turbopack_require__("[project]/node_modules/yaot/lib/bounds3.js [app-client] (ecmascript)");
var TreeNode = __turbopack_require__("[project]/node_modules/yaot/lib/treeNode.js [app-client] (ecmascript)");
var EmptyRegion = new Bounds3();
var asyncFor = __turbopack_require__("[project]/node_modules/rafor/index.js [app-client] (ecmascript)");
module.exports = createTree;
function createTree(options) {
    options = options || {};
    var noPoints = [];
    var root;
    var originalArray;
    var api = {
        /**
     * Initializes tree asynchronously. Very useful when you have millions
     * of points and do not want to block rendering thread for too long.
     *
     * @param {number[]} points array of points for which we are building the
     * tree. Flat sequence of (x, y, z) coordinates. Array length should be
     * multiple of 3.
     *
     * @param {Function=} doneCallback called when tree is initialized. The
     * callback will be called with single argument which represent current
     * tree.
     */ initAsync: initAsync,
        /**
     * Synchronous version of `initAsync()`. Should only be used for small
     * trees (less than 50-70k of points).
     *
     * @param {number[]} points array of points for which we are building the
     * tree. Flat sequence of (x, y, z) coordinates. Array length should be
     * multiple of 3.
     */ init: init,
        /**
     * Gets bounds of the root node. Bounds are represented by center of the
     * node (x, y, z) and `half` attribute - distance from the center to an
     * edge of the root node.
     */ bounds: getBounds,
        /**
     * Fires a ray from `rayOrigin` into `rayDirection` and collects all points
     * that lie in the octants intersected by the ray.
     *
     * This method implements An Efficient Parametric Algorithm for Octree Traversal
     * described in http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf
     *
     * @param {Vector3} rayOrigin x,y,z coordinates where ray starts
     * @param {Vector3} rayDirection normalized x,y,z direction where ray shoots.
     * @param {number+} near minimum distance from the ray origin. 0 by default.
     * @param {number+} far maximum length of the ray. POSITIVE_INFINITY by default
     *
     * @return {Array} of indices in the source array. Each index represnts a start
     * of the x,y,z triplet of a point, that lies in the intersected octant.
     */ intersectRay: intersectRay,
        /**
     * Once you have collected points from the octants intersected by a ray
     * (`intersectRay()` method), it may be worth to query points from the surrouning
     * area.
     */ intersectSphere: intersectSphere,
        /**
     * Gets root node of the tree
     */ getRoot: getRoot
    };
    return api;
    "TURBOPACK unreachable";
    function getRoot() {
        return root;
    }
    function intersectSphere(cx, cy, cz, r) {
        if (!root) {
            // Most likely we are not initialized yet
            return noPoints;
        }
        var indices = [];
        var r2 = r * r;
        root.query(indices, originalArray, intersectCheck, preciseCheck);
        return indices;
        "TURBOPACK unreachable";
        // http://stackoverflow.com/questions/4578967/cube-sphere-intersection-test
        function intersectCheck(candidate) {
            var dist = r2;
            var half = candidate.half;
            if (cx < candidate.x - half) dist -= sqr(cx - (candidate.x - half));
            else if (cx > candidate.x + half) dist -= sqr(cx - (candidate.x + half));
            if (cy < candidate.y - half) dist -= sqr(cy - (candidate.y - half));
            else if (cy > candidate.y + half) dist -= sqr(cy - (candidate.y + half));
            if (cz < candidate.z - half) dist -= sqr(cz - (candidate.z - half));
            else if (cz > candidate.z + half) dist -= sqr(cz - (candidate.z + half));
            return dist > 0;
        }
        function preciseCheck(x, y, z) {
            return sqr(x - cx) + sqr(y - cy) + sqr(z - cz) < r2;
        }
    }
    function sqr(x) {
        return x * x;
    }
    function intersectRay(rayOrigin, rayDirection, near, far) {
        if (!root) {
            // Most likely we are not initialized yet
            return noPoints;
        }
        if (near === undefined) near = 0;
        if (far === undefined) far = Number.POSITIVE_INFINITY;
        // we save as squar, to avoid expensive sqrt() operation
        near *= near;
        far *= far;
        var indices = [];
        root.query(indices, originalArray, intersectCheck, farEnough);
        return indices.sort(byDistanceToCamera);
        "TURBOPACK unreachable";
        function intersectCheck(candidate) {
            // using http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf
            var half = candidate.half;
            var t1 = (candidate.x - half - rayOrigin.x) / rayDirection.x, t2 = (candidate.x + half - rayOrigin.x) / rayDirection.x, t3 = (candidate.y + half - rayOrigin.y) / rayDirection.y, t4 = (candidate.y - half - rayOrigin.y) / rayDirection.y, t5 = (candidate.z - half - rayOrigin.z) / rayDirection.z, t6 = (candidate.z + half - rayOrigin.z) / rayDirection.z, tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)), tmin;
            if (tmax < 0) return false;
            tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
            return tmin <= tmax && tmin <= far;
        }
        function farEnough(x, y, z) {
            var dist = (x - rayOrigin.x) * (x - rayOrigin.x) + (y - rayOrigin.y) * (y - rayOrigin.y) + (z - rayOrigin.z) * (z - rayOrigin.z);
            return near <= dist && dist <= far;
        }
        function byDistanceToCamera(idx0, idx1) {
            var x0 = rayOrigin[idx0];
            var y0 = rayOrigin[idx0 + 1];
            var z0 = rayOrigin[idx0 + 2];
            var dist0 = (x0 - rayOrigin.x) * (x0 - rayOrigin.x) + (y0 - rayOrigin.y) * (y0 - rayOrigin.y) + (z0 - rayOrigin.z) * (z0 - rayOrigin.z);
            var x1 = rayOrigin[idx1];
            var y1 = rayOrigin[idx1 + 1];
            var z1 = rayOrigin[idx1 + 2];
            var dist1 = (x1 - rayOrigin.x) * (x1 - rayOrigin.x) + (y1 - rayOrigin.y) * (y1 - rayOrigin.y) + (z1 - rayOrigin.z) * (z1 - rayOrigin.z);
            return dist0 - dist1;
        }
    }
    function init(points) {
        verifyPointsInvariant(points);
        originalArray = points;
        root = createRootNode(points);
        for(var i = 0; i < points.length; i += 3){
            root.insert(i, originalArray, 0);
        }
    }
    function initAsync(points, doneCallback) {
        verifyPointsInvariant(points);
        var tempRoot = createRootNode(points);
        asyncFor(points, insertToRoot, doneInternal, {
            step: 3
        });
        function insertToRoot(element, i) {
            tempRoot.insert(i, points, 0);
        }
        function doneInternal() {
            originalArray = points;
            root = tempRoot;
            if (typeof doneCallback === 'function') {
                doneCallback(api);
            }
        }
    }
    function verifyPointsInvariant(points) {
        if (!points) throw new Error('Points array is required for quadtree to work');
        if (typeof points.length !== 'number') throw new Error('Points should be array-like object');
        if (points.length % 3 !== 0) throw new Error('Points array should consist of series of x,y,z coordinates and be multiple of 3');
    }
    function getBounds() {
        if (!root) return EmptyRegion;
        return root.bounds;
    }
    function createRootNode(points) {
        // Edge case deserves empty region:
        if (points.length === 0) {
            var empty = new Bounds3();
            return new TreeNode(empty);
        }
        // Otherwise let's figure out how big should be the root region
        var minX = Number.POSITIVE_INFINITY;
        var minY = Number.POSITIVE_INFINITY;
        var minZ = Number.POSITIVE_INFINITY;
        var maxX = Number.NEGATIVE_INFINITY;
        var maxY = Number.NEGATIVE_INFINITY;
        var maxZ = Number.NEGATIVE_INFINITY;
        for(var i = 0; i < points.length; i += 3){
            var x = points[i], y = points[i + 1], z = points[i + 2];
            if (x < minX) minX = x;
            if (x > maxX) maxX = x;
            if (y < minY) minY = y;
            if (y > maxY) maxY = y;
            if (z < minZ) minZ = z;
            if (z > maxZ) maxZ = z;
        }
        // Make bounds square:
        var side = Math.max(Math.max(maxX - minX, maxY - minY), maxZ - minZ);
        // since we need to have both sides inside the area, let's artificially
        // grow the root region:
        side += 2;
        minX -= 1;
        minY -= 1;
        minZ -= 1;
        var half = side / 2;
        var bounds = new Bounds3(minX + half, minY + half, minZ + half, half);
        return new TreeNode(bounds);
    }
}
}}),
"[project]/node_modules/rafor/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
module.exports = asyncFor;
/**
 * Iterates over array in async manner. This function attempts to maximize
 * number of elements visited within single event loop cycle, while at the
 * same time tries to not exceed a time threshold allowed to stay within
 * event loop.
 *
 * @param {Array} array which needs to be iterated. Array-like objects are OK too.
 * @param {VisitCalback} visitCallback called for every element within for loop.
 * @param {DoneCallback} doneCallback called when iterator has reached end of array.
 * @param {Object=} options - additional configuration:
 * @param {number} [options.step=1] - default iteration step
 * @param {number} [options.maxTimeMS=8] - maximum time (in milliseconds) which
 *   iterator should spend within single event loop.
 * @param {number} [options.probeElements=5000] - how many elements should iterator
 *   visit to measure its iteration speed.
 */ function asyncFor(array, visitCallback, doneCallback, options) {
    var start = 0;
    var elapsed = 0;
    options = options || {};
    var step = options.step || 1;
    var maxTimeMS = options.maxTimeMS || 8;
    var pointsPerLoopCycle = options.probeElements || 5000;
    // we should never block main thread for too long...
    setTimeout(processSubset, 0);
    function processSubset() {
        var finish = Math.min(array.length, start + pointsPerLoopCycle);
        var i = start;
        var timeStart = new Date();
        for(i = start; i < finish; i += step){
            visitCallback(array[i], i, array);
        }
        if (i < array.length) {
            elapsed += new Date() - timeStart;
            start = i;
            pointsPerLoopCycle = Math.round(start * maxTimeMS / elapsed);
            setTimeout(processSubset, 0);
        } else {
            doneCallback(array);
        }
    }
}
}}),
"[project]/node_modules/lodash-es/isObjectLike.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
const __TURBOPACK__default__export__ = isObjectLike;
}}),
"[project]/node_modules/lodash-es/_freeGlobal.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/** Detect free variable `global` from Node.js. */ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
const __TURBOPACK__default__export__ = freeGlobal;
}}),
"[project]/node_modules/lodash-es/_root.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_freeGlobal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_freeGlobal.js [app-client] (ecmascript)");
;
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_freeGlobal$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] || freeSelf || Function('return this')();
const __TURBOPACK__default__export__ = root;
}}),
"[project]/node_modules/lodash-es/_Symbol.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_root$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_root.js [app-client] (ecmascript)");
;
/** Built-in value references. */ var Symbol = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_root$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Symbol;
const __TURBOPACK__default__export__ = Symbol;
}}),
"[project]/node_modules/lodash-es/_objectToString.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/** Used for built-in method references. */ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
const __TURBOPACK__default__export__ = objectToString;
}}),
"[project]/node_modules/lodash-es/_getRawTag.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_Symbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_Symbol.js [app-client] (ecmascript)");
;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_Symbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_Symbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if ("TURBOPACK compile-time truthy", 1) {
        if (isOwn) {
            value[symToStringTag] = tag;
        } else {
            delete value[symToStringTag];
        }
    }
    return result;
}
const __TURBOPACK__default__export__ = getRawTag;
}}),
"[project]/node_modules/lodash-es/_baseGetTag.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_Symbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_Symbol.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_objectToString$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_objectToString.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_getRawTag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_getRawTag.js [app-client] (ecmascript)");
;
;
;
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_Symbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_Symbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_getRawTag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(value) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_objectToString$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(value);
}
const __TURBOPACK__default__export__ = baseGetTag;
}}),
"[project]/node_modules/lodash-es/isSymbol.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isObjectLike$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/isObjectLike.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_baseGetTag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_baseGetTag.js [app-client] (ecmascript)");
;
;
/** `Object#toString` result references. */ var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == 'symbol' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isObjectLike$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(value) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_baseGetTag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(value) == symbolTag;
}
const __TURBOPACK__default__export__ = isSymbol;
}}),
"[project]/node_modules/lodash-es/isObject.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
const __TURBOPACK__default__export__ = isObject;
}}),
"[project]/node_modules/lodash-es/_trimmedEndIndex.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/** Used to match a single whitespace character. */ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */ function trimmedEndIndex(string) {
    var index = string.length;
    while(index-- && reWhitespace.test(string.charAt(index))){}
    return index;
}
const __TURBOPACK__default__export__ = trimmedEndIndex;
}}),
"[project]/node_modules/lodash-es/_baseTrim.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_trimmedEndIndex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_trimmedEndIndex.js [app-client] (ecmascript)");
;
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */ function baseTrim(string) {
    return string ? string.slice(0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_trimmedEndIndex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(string) + 1).replace(reTrimStart, '') : string;
}
const __TURBOPACK__default__export__ = baseTrim;
}}),
"[project]/node_modules/lodash-es/toNumber.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isSymbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/isSymbol.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isObject$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/isObject.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_baseTrim$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_baseTrim.js [app-client] (ecmascript)");
;
;
;
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == 'number') {
        return value;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isSymbol$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(value)) {
        return NAN;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isObject$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isObject$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
        return value === 0 ? value : +value;
    }
    value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_baseTrim$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
const __TURBOPACK__default__export__ = toNumber;
}}),
"[project]/node_modules/lodash-es/now.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_root$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/_root.js [app-client] (ecmascript)");
;
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */ var now = function() {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$_root$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].Date.now();
};
const __TURBOPACK__default__export__ = now;
}}),
"[project]/node_modules/lodash-es/debounce.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$toNumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/toNumber.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isObject$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/isObject.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$now$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/now.js [app-client] (ecmascript)");
;
;
;
/** Error message constants. */ var FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */ function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$toNumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(wait) || 0;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isObject$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$toNumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
        var time = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$now$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) {
            clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$now$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])());
    }
    function debounced() {
        var time = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$now$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
const __TURBOPACK__default__export__ = debounce;
}}),
"[project]/node_modules/kapsule/dist/kapsule.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>index)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$debounce$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lodash-es/debounce.js [app-client] (ecmascript)");
;
function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];
    return n;
}
function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
}
function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _createClass(e, r, t) {
    return Object.defineProperty(e, "prototype", {
        writable: !1
    }), e;
}
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) ;
            else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
            o = !0, n = r;
        } finally{
            try {
                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _unsupportedIterableToArray(r, a) {
    if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = ({}).toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
}
var Prop = /*#__PURE__*/ _createClass(function Prop(name, _ref) {
    var _ref$default = _ref["default"], defaultVal = _ref$default === void 0 ? null : _ref$default, _ref$triggerUpdate = _ref.triggerUpdate, triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? function(newVal, state) {} : _ref$onChange;
    _classCallCheck(this, Prop);
    this.name = name;
    this.defaultVal = defaultVal;
    this.triggerUpdate = triggerUpdate;
    this.onChange = onChange;
});
function index(_ref2) {
    var _ref2$stateInit = _ref2.stateInit, stateInit = _ref2$stateInit === void 0 ? function() {
        return {};
    } : _ref2$stateInit, _ref2$props = _ref2.props, rawProps = _ref2$props === void 0 ? {} : _ref2$props, _ref2$methods = _ref2.methods, methods = _ref2$methods === void 0 ? {} : _ref2$methods, _ref2$aliases = _ref2.aliases, aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases, _ref2$init = _ref2.init, initFn = _ref2$init === void 0 ? function() {} : _ref2$init, _ref2$update = _ref2.update, updateFn = _ref2$update === void 0 ? function() {} : _ref2$update;
    // Parse props into Prop instances
    var props = Object.keys(rawProps).map(function(propName) {
        return new Prop(propName, rawProps[propName]);
    });
    return function KapsuleComp() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var classMode = !!(this instanceof KapsuleComp ? this.constructor : void 0);
        var nodeElement = classMode ? args.shift() : undefined;
        var _args$ = args[0], options = _args$ === void 0 ? {} : _args$;
        // Holds component state
        var state = Object.assign({}, stateInit instanceof Function ? stateInit(options) : stateInit, // Support plain objects for backwards compatibility
        {
            initialised: false
        });
        // keeps track of which props triggered an update
        var changedProps = {};
        // Component constructor
        function comp(nodeElement) {
            initStatic(nodeElement, options);
            digest();
            return comp;
        }
        var initStatic = function initStatic(nodeElement, options) {
            initFn.call(comp, nodeElement, state, options);
            state.initialised = true;
        };
        var digest = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$debounce$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(function() {
            if (!state.initialised) {
                return;
            }
            updateFn.call(comp, state, changedProps);
            changedProps = {};
        }, 1);
        // Getter/setter methods
        props.forEach(function(prop) {
            comp[prop.name] = getSetProp(prop);
            function getSetProp(_ref3) {
                var prop = _ref3.name, _ref3$triggerUpdate = _ref3.triggerUpdate, redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate, _ref3$onChange = _ref3.onChange, onChange = _ref3$onChange === void 0 ? function(newVal, state) {} : _ref3$onChange, _ref3$defaultVal = _ref3.defaultVal, defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;
                return function(_) {
                    var curVal = state[prop];
                    if (!arguments.length) {
                        return curVal;
                    } // Getter mode
                    var val = _ === undefined ? defaultVal : _; // pick default if value passed is undefined
                    state[prop] = val;
                    onChange.call(comp, val, state, curVal);
                    // track changed props
                    !changedProps.hasOwnProperty(prop) && (changedProps[prop] = curVal);
                    if (redigest) {
                        digest();
                    }
                    return comp;
                };
            }
        });
        // Other methods
        Object.keys(methods).forEach(function(methodName) {
            comp[methodName] = function() {
                var _methods$methodName;
                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){
                    args[_key2] = arguments[_key2];
                }
                return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [
                    comp,
                    state
                ].concat(args));
            };
        });
        // Link aliases
        Object.entries(aliases).forEach(function(_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2), alias = _ref5[0], target = _ref5[1];
            return comp[alias] = comp[target];
        });
        // Reset all component props to their default value
        comp.resetProps = function() {
            props.forEach(function(prop) {
                comp[prop.name](prop.defaultVal);
            });
            return comp;
        };
        //
        comp.resetProps(); // Apply all prop defaults
        state._rerender = digest; // Expose digest method
        classMode && nodeElement && comp(nodeElement);
        return comp;
    };
}
;
}}),
"[project]/node_modules/index-array-by/dist/index-array-by.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>index)
});
function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];
    return n;
}
function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) ;
            else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
            o = !0, n = r;
        } finally{
            try {
                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o, r, i = _objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
        var s = Object.getOwnPropertySymbols(e);
        for(r = 0; r < s.length; r++)o = s[r], t.includes(o) || ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
}
function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {
        if (e.includes(n)) continue;
        t[n] = r[n];
    }
    return t;
}
function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r);
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(t);
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray(r, a) {
    if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = ({}).toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
}
var index = function() {
    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var keyAccessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var multiItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var flattenKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [
        undefined
    ] : [
        keyAccessors
    ]).map(function(key) {
        return {
            keyAccessor: key,
            isProp: !(key instanceof Function)
        };
    });
    var indexedResult = list.reduce(function(res, item) {
        var iterObj = res;
        var itemVal = item;
        keys.forEach(function(_ref, idx) {
            var keyAccessor = _ref.keyAccessor, isProp = _ref.isProp;
            var key;
            if (isProp) {
                var _itemVal = itemVal, propVal = _itemVal[keyAccessor], rest = _objectWithoutProperties(_itemVal, [
                    keyAccessor
                ].map(_toPropertyKey));
                key = propVal;
                itemVal = rest;
            } else {
                key = keyAccessor(itemVal, idx);
            }
            if (idx + 1 < keys.length) {
                if (!iterObj.hasOwnProperty(key)) {
                    iterObj[key] = {};
                }
                iterObj = iterObj[key];
            } else {
                // Leaf key
                if (multiItem) {
                    if (!iterObj.hasOwnProperty(key)) {
                        iterObj[key] = [];
                    }
                    iterObj[key].push(itemVal);
                } else {
                    iterObj[key] = itemVal;
                }
            }
        });
        return res;
    }, {});
    if (multiItem instanceof Function) {
        // Reduce leaf multiple values
        (function reduce(node) {
            var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            if (level === keys.length) {
                Object.keys(node).forEach(function(k) {
                    return node[k] = multiItem(node[k]);
                });
            } else {
                Object.values(node).forEach(function(child) {
                    return reduce(child, level + 1);
                });
            }
        })(indexedResult); // IIFE
    }
    var result = indexedResult;
    if (flattenKeys) {
        // flatten into array
        result = [];
        (function flatten(node) {
            var accKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            if (accKeys.length === keys.length) {
                result.push({
                    keys: accKeys,
                    vals: node
                });
            } else {
                Object.entries(node).forEach(function(_ref2) {
                    var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], val = _ref3[1];
                    return flatten(val, [].concat(_toConsumableArray(accKeys), [
                        key
                    ]));
                });
            }
        })(indexedResult); //IIFE
        if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {
            // clear keys if there's no key accessors (single result)
            result[0].keys = [];
        }
    }
    return result;
};
;
}}),
}]);

//# sourceMappingURL=node_modules_3be1a5._.js.map